{"version":3,"sources":["leaderboard/img/nyt_graph.png","leaderboard/img/jhu_graph.png","leaderboard/img/usf_graph.png","leaderboard/img/all_graph.png","covid19graph.js","modelapi.js","covid19util.js","covid19map.js","covid19predict.js","aboutus.js","scorePage/scoreGraph.js","scorePage/scoreMap.js","scorePage/scorePage.js","navbar/navbar.js","leaderboard/leaderboard.js","covid19app.js","serviceWorker.js","index.js"],"names":["module","exports","DashedLine","series","lineGenerator","xScale","yScale","map","id","data","color","predicted","distancing","style","strokeWidth","strokeDasharray","key","d","x","y","fill","stroke","theme","axis","ticks","text","fontSize","legend","legends","Covid19Graph","dateStr","split","Number","year","month","day","Date","parseDate","date","value","initialVal","i","params","statistic","retData","this","getDeltaData","getCumulativeData","filter","props","max","Object","keys","forEach","area","observed","predictions","Math","p","timeSeries","time_series","linearAxisLeft","format","numeral","orient","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","logTickValues","ceil","log10","getDataMax","push","pow","logAxisLeft","tickValues","axisLeft","gridYValues","type","base","min","dataType","chartData","colors","sort","idx","lineColor","index","red","gold","green","blue","volcano","yellow","cyan","purple","organge","lime","geekblue","magenta","length","getLineColor","observedData","observed_deaths","processData","modelName","model","name","minDate","maxDate","moment","diff","margin","top","right","bottom","left","precision","axisBottom","getYAxisProps","enableSlices","sliceTooltip","slice","background","padding","border","points","point","serieColor","serieId","yFormatted","pointSize","pointLabel","pointLabelYOffset","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","layers","Component","API_BASE_URL","process","ModelAPI","callback","endpoint","axios","get","then","res","allAreas","allModels","infectionModels","deathModels","currentDate","latestDate","areaToStr","a","country","state","strToArea","s","words","trim","am4core","am4themes_animated","Covid19Map","onShowState","setState","showState","modelAPI","areasList","areas","triggerRef","fetchData","dynamicMapOn","days","predict_all","cumulativeInfections","console","log","heatmapData","iso_2","valueTrue","resetChart","history_cumulative","historyCumulative","deathValue","previousCumulative","find","historyInfections","nextDayCumulative","cumulative_infections","createChart","cumulative_death","cumulativeDeath","chart","am4maps","projection","Mercator","seriesProps","polygonTemplate","assign","mapPolygons","template","heatRules","property","target","minValue","maxValue","tooltipText","nonScalingStroke","states","create","properties","cursorOverStyle","pointer","onMapClick","onNoData","events","e","dataItem","dataContext","zoomControl","button","chartContainer","createChild","label","togglable","align","marginRight","isActive","stateSeries","disabled","initChart","createChartSeries","geodata","am4geodata_worldLow","exclude","chinaSeries","am4geodata_chinaLow","usaSeries","am4geodata_usaLow","canadaSeries","am4geodata_canadaLow","australiaSeries","am4geodata_australiaLow","initChartInterface","dispose","Option","Covid19Predict","handleYScaleSelect","handleStatisticSelect","reloadAll","handleDataTypeSelect","infection_models","modelsList","models","formRef","current","setFieldsValue","death_models","componentWillMount","addAreaByStr","React","createRef","getCurrentDate","bindRef","ref","onAlertClose","noDataError","errorDescription","generateMarks","firstDate","setDate","getDate","marks","getMonth","getDaysToFirstDate","abs","distancingOn","distancingOff","mainGraphData","bind","removeAreaByStr","onValuesChange","onDaysToPredictChange","switchDynamicMap","handleModelChange","areaIsSelected","newAreaStr","includes","areaStr","areaObj","prevState","predict","checkHistory","targetAreaStr","reduce","newMainGraphData","newModelStr","changedValues","allValues","socialDistancing","prevAreas","newAreas","areasToAdd","areasToRemove","checked","daysToFirstDate","countryOptions","modelOptions","modelIsSelected","title","description","placement","SOCIAL_DISTANCING_CLARIFICATION","href","className","span","message","closable","onClose","initialValues","Item","rules","required","mode","width","placeholder","initialvalue","onChange","initialValue","onAfterChange","content","Group","defaultChecked","PureComponent","AboutUs","ScoreGraph","upperBound","conf","lowerBound","ScoreMap","scores_all","weeks","scores","latestWeek","ScorePage","componentDidMount","latest_score_date","lastDate","onWeeksChange","NavBar","handleItemClick","redirectForecast","redirectAbout","redirectScore","redirectLeaderboard","activeItem","activateItem","url","window","location","src","alt","onClick","defaultSelectedKeys","jhu","runningAvgRankings","link","RMSE","recentRankings","nyt","usafacts","Leaderboard","number","icon_src","itemLayout","dataSource","renderItem","item","Meta","avatar","getAvatar","indexOf","nyt_graph","jhu_graph","usf_graph","all_graph","Covid19App","basename","to","exact","path","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f71da0fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nyt_graph.2617fd63.png\";","module.exports = __webpack_public_path__ + \"static/media/jhu_graph.0eb71c66.png\";","module.exports = __webpack_public_path__ + \"static/media/usf_graph.037531ff.png\";","module.exports = __webpack_public_path__ + \"static/media/all_graph.bc502e3f.png\";","import React, { Component } from \"react\";\nimport { ResponsiveLine } from \"@nivo/line\";\nimport moment from \"moment\";\nimport numeral from \"numeral\";\nimport {\n  red,\n  volcano,\n  organge,\n  yellow,\n  gold,\n  lime,\n  green,\n  cyan,\n  blue,\n  geekblue,\n  purple,\n  magenta\n} from \"@ant-design/colors\";\n\nfunction getLineColor(index) {\n  const colors = [\n    red,\n    gold,\n    green,\n    blue,\n    volcano,\n    yellow,\n    cyan,\n    purple,\n    organge,\n    lime,\n    geekblue,\n    magenta\n  ];\n\n  return colors[index % colors.length];\n}\n\n// Custom layer for Nivo Line that allows us to display predictions as dashed\n// lines.\nconst DashedLine = ({ series, lineGenerator, xScale, yScale }) => {\n  return series.map(({ id, data, color, predicted, distancing }) => {\n    let style = {\n      strokeWidth: 3\n    };\n\n    // Add custom style if predicted.\n    if (predicted) {\n      if (distancing) {\n        style.strokeDasharray = \"6, 4\";\n      } else {\n        // Display a sparser pattern for no social distancing.\n        style.strokeDasharray = \"2, 6\";\n      }\n    }\n\n    return (\n      <path\n        key={id}\n        d={lineGenerator(\n          data.map(d => ({\n            x: xScale(d.data.x),\n            y: yScale(d.data.y)\n          }))\n        )}\n        fill=\"none\"\n        stroke={color}\n        style={style}\n      />\n    );\n  });\n};\n\nconst theme = {\n  axis: {\n    ticks: {\n      text: {\n        fontSize: 18\n      }\n    },\n    legend: {\n      text: {\n        fontSize: 18\n      }\n    }\n  },\n  legends: {\n    text: {\n      fontSize: 18\n    }\n  }\n};\n\nclass Covid19Graph extends Component {\n  parseDate(dateStr) {\n    let [year, month, day] = dateStr.split(\"-\").map(Number);\n    // Month in JS is 0-based.\n    month -= 1;\n    return new Date(year, month, day);\n  }\n\n  /**\n   * Given a time series returned by the predict endpoint, getCumulativeData\n   * returns it in Nivo format.\n   */\n  getCumulativeData(data) {\n    return data.map(d => ({\n      x: this.parseDate(d.date),\n      y: d.value\n    }));\n  }\n\n  /**\n   * Given a time series returned by the predict endpoint, getDeltaData returns\n   * the adjacent difference of the timeseries, in Nivo format.\n   * @param initialVal - The initial value that is subtracted from the 1st\n   *  element.\n   */\n  getDeltaData(data, initialVal) {\n    return data.map((d, i) => {\n      if (i === 0) {\n        return {\n          x: this.parseDate(d.date),\n          y: d.value - initialVal\n        };\n      }\n\n      return {\n        x: this.parseDate(d.date),\n        y: d.value - data[i - 1].value\n      };\n    });\n  }\n\n  // processData properly formats the given data, and performs special\n  // operations based on parameter values.\n  processData(data, params) {\n    const { statistic, yScale, initialVal } = params;\n\n    // Determine whether we need to calculate deltas between points.\n    let retData =\n      statistic === \"delta\"\n        ? this.getDeltaData(data, initialVal)\n        : this.getCumulativeData(data);\n\n    // Remove all points with y = 0 if we're using log scale, otherwise it will\n    // break.\n    if (yScale === \"log\") {\n      retData = retData.filter(({ x, y }) => y > 0);\n    }\n\n    return retData;\n  }\n\n  /**\n   * getDataMax returns the maximum value present in the data supplied to the\n   * graph.\n   */\n  getDataMax() {\n    const { data } = this.props;\n\n    let max = 0;\n\n    Object.keys(data).forEach(area => {\n      const { observed, predictions } = data[area];\n      max = Math.max(max, Math.max(...observed.map(({ value }) => value)));\n\n      predictions.forEach(p => {\n        const timeSeries = p.time_series;\n        max = Math.max(max, Math.max(...timeSeries.map(({ value }) => value)));\n      });\n    });\n\n    return max;\n  }\n\n  /**\n   * getYAxisProps returns the corresponding Nivo line props for supporting\n   * different Y axis types (linear and log).\n   */\n  getYAxisProps() {\n    const { statistic, yScale } = this.props;\n\n    const linearAxisLeft = {\n      // Format large y numbers as their abbreviations.\n      format: y => numeral(y).format(\"0.[0]a\"),\n      orient: \"left\",\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: statistic === \"delta\" ? \"New Cases\" : \"Cumulative Cases\",\n      legendOffset: -60,\n      legendPosition: \"middle\"\n    };\n\n    let logTickValues = [];\n    for (let i = 0; i <= Math.ceil(Math.log10(this.getDataMax())); i++) {\n      logTickValues.push(Math.pow(10, i));\n    }\n\n    // The 'axisLeft' prop for log scale is the same as for linear axis, except\n    // that the tick values must be supplied.\n    const logAxisLeft = {\n      ...linearAxisLeft,\n      tickValues: logTickValues\n    };\n\n    // For log scale Y axes, we must supply the Y tick values for the grid, as\n    // well as specifying the min/ max, since it seems like Nivo cannot\n    // automatically determine the domain for log scale.\n    if (yScale === \"log\") {\n      return {\n        axisLeft: logAxisLeft,\n        gridYValues: logTickValues,\n        yScale: {\n          type: \"log\",\n          base: 10,\n          min: Math.min(...logTickValues),\n          max: Math.max(...logTickValues)\n        }\n      };\n    }\n\n    return {\n      axisLeft: linearAxisLeft,\n      yScale: {\n        type: \"linear\",\n        min: \"auto\",\n        max: \"auto\"\n      }\n    };\n  }\n\n  render() {\n    let { data } = this.props;\n    const { statistic, yScale, dataType } = this.props;\n\n    // chartData contains the data that we will pass into Nivo line chart.\n    let chartData = [];\n    // colors holds hex values for each line in the chart.\n    let colors = [];\n\n    // Sort the data by area name (so we have a consistent coloring) and then\n    // loop over each area.\n    Object.keys(data)\n      .sort()\n      .forEach((area, idx) => {\n        const lineColor = getLineColor(idx);\n        const observedData = dataType == \"confirmed\" ? data[area].observed : data[area].observed_deaths;\n\n        // Add the observed infection data.\n        chartData.push({\n          id: area,\n          data: this.processData(observedData, {\n            statistic: statistic,\n            yScale: yScale,\n            initialVal: 0\n          }),\n          // 'predicted' is a custom prop that we add so later we can tell the\n          // difference between observed/predicted data when drawing the lines.\n          predicted: false\n        });\n\n        colors.push(lineColor[4]);\n\n        // Add the data for each of the predicted time series. Filter out time\n        // series that don't have any data associated.\n        data[area].predictions\n          .filter(p => p.time_series.length > 0)\n          .forEach((p,idx) => {\n            const modelName = p.model.name;\n            const distancing = p.distancing;\n            const timeSeries = p.time_series;\n\n            chartData.push({\n              id: `${area} (${modelName}, distancing=${distancing})`,\n              // If we're displaying deltas, we pass in the last observed value as\n              // the initial value for calculating the predicted deltas.\n              data: this.processData(timeSeries, {\n                statistic: statistic,\n                yScale: yScale,\n                initialVal: observedData[observedData.length - 1].value\n              }),\n              // 'predicted' is a custom prop that we add so later we can tell the\n              // difference between observed/predicted data when drawing the lines.\n              predicted: true,\n              // 'distancing' is also a custom prop we add so we can draw the\n              // line patterns differently between yes/no social distancing.\n              distancing: distancing\n            });\n            if (idx <= 2)\n            {\n              colors.push(lineColor[4+idx*2]);\n            }\n            else if (idx <= 4)\n            {\n              colors.push(lineColor[8 - idx*2]);\n\n            }\n            else \n            {\n              colors.push(lineColor[idx%10]);\n            }\n          });\n      });\n\n    // Determine whether we need to show weeks or months on the X axis.\n    let tickValues = \"every week\";\n\n    if (chartData.length > 0) {\n      // Calculate the minimum and maximum dates present in the data.\n      let minDate = chartData[0].data[0].x;\n      let maxDate = chartData[0].data[0].x;\n\n      chartData.forEach(({ data }) => {\n        data.forEach(({ x }) => {\n          minDate = Math.min(minDate, x);\n          maxDate = Math.max(maxDate, x);\n        });\n      });\n\n      minDate = moment(minDate);\n      maxDate = moment(maxDate);\n\n      // Switch to 'every month' if the date range is over a certain threshold.\n      const diffInDays = maxDate.diff(minDate, \"days\");\n      if (diffInDays > 150) {\n        tickValues = \"every month\";\n      }\n    }\n\n    return (\n      <ResponsiveLine\n        data={chartData}\n        colors={colors}\n        //50,50,50,80\n        margin={{ top: 10, right: 50, bottom: 70, left: 100 }}\n        xScale={{\n          type: \"time\",\n          format: \"native\",\n          precision: \"day\"\n        }}\n        axisBottom={{\n          // tickValues determines how often / with what values our 'format'\n          // func is called.\n          tickValues: tickValues,\n          // A custom 'format' func is required since all the x values are\n          // javascript Date objects.\n          format: date => {\n            return moment(date).format(\"M/D\");\n          },\n          orient: \"bottom\",\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: \"Date\",\n          legendOffset: 36,\n          legendPosition: \"middle\"\n        }}\n        // Set up the Y axis.\n        {...this.getYAxisProps()}\n        enableSlices=\"x\"\n        sliceTooltip={({ slice }) => {\n          return (\n            <div\n              style={{\n                background: \"white\",\n                padding: \"9px 12px\",\n                border: \"1px solid #ccc\"\n              }}\n            >\n              <div>\n                {// Grab the date from the first point, this will be the title of\n                // the tooltip.\n                moment(slice.points[0].data.x).format(\"MMM Do YYYY\")}\n              </div>\n              {slice.points.map(point => (\n                <div\n                  key={point.id}\n                  style={{\n                    color: point.serieColor,\n                    padding: \"3px 0\"\n                  }}\n                >\n                  <strong>{point.serieId}</strong>[\n                  {numeral(point.data.yFormatted).format(\"0.[0]a\")}]\n                </div>\n              ))}\n            </div>\n          );\n        }}\n        pointSize={0}\n        pointLabel=\"y\"\n        pointLabelYOffset={-12}\n        legends={[\n          {\n            anchor: \"top-left\",\n            direction: \"column\",\n            justify: false,\n            translateX: 0,\n            translateY: 0,\n            itemsSpacing: 0,\n            itemDirection: \"left-to-right\",\n            itemWidth: 80,\n            itemHeight: 20,\n            itemOpacity: 0.75,\n            symbolSize: 12,\n            symbolShape: \"circle\",\n            symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n            effects: [\n              {\n                on: \"hover\",\n                style: {\n                  itemBackground: \"rgba(0, 0, 0, .03)\",\n                  itemOpacity: 1\n                }\n              }\n            ]\n          }\n        ]}\n        layers={[\n          \"grid\",\n          \"markers\",\n          \"areas\",\n          \"crosshair\",\n          DashedLine,\n          \"slices\",\n          \"points\",\n          \"axes\",\n          \"legends\"\n        ]}\n        theme={theme}\n      />\n    );\n  }\n}\n\nexport default Covid19Graph;\n","import axios from \"axios\";\n\n// TODO: Update with actual backend URL once backend is up and running.\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_BASE_URL;\n\nclass ModelAPI {\n  affected_by(callback) {}\n\n  areas(callback) {\n    const endpoint = `${API_BASE_URL}/areas`;\n    axios.get(endpoint).then(res => {\n      const allAreas = res.data;\n      callback(allAreas);\n    });\n  }\n\n  models(callback) {\n    const endpoint = `${API_BASE_URL}/models`;\n    axios.get(endpoint).then(res => {\n      const allModels = res.data;\n      callback(allModels);\n    });\n  }\n\n  infection_models(callback) {\n    const endpoint = `${API_BASE_URL}/infection_models`;\n    axios.get(endpoint).then(res => {\n      const infectionModels = res.data;\n      callback(infectionModels);\n    });\n  }\n\n  death_models(callback) {\n    const endpoint = `${API_BASE_URL}/death_models`;\n    axios.get(endpoint).then(res => {\n      const deathModels = res.data;\n      callback(deathModels);\n    });\n  }\n\n  cumulative_infections(callback) {\n    const endpoint = `${API_BASE_URL}/cumulative_infections`;\n    axios.get(endpoint).then(res => callback(res.data));\n  }\n\n  /**\n   * Params should have 'days', 'model'\n   */\n  predict_all(params, callback) {\n    const endpoint = `${API_BASE_URL}/predict_all`;\n    axios.get(endpoint, {\n      params: params\n    }).then(res => callback(res.data));\n  }\n\n  /**\n   * Params should have 'country', 'state', 'days', 'distancingOn,' 'distancingOff'\n   */\n  predict(params, callback) {\n    const endpoint = `${API_BASE_URL}/predict`;\n    axios\n      .get(endpoint, {\n        params: params\n      })\n      .then(res => {\n        callback(res.data);\n      });\n  }\n\n  // get the current date of observed data\n  getCurrentDate(callback) {\n    const endpoint =  `${API_BASE_URL}/current_date`;\n    axios.get(endpoint).then(res => {\n      const currentDate = res.data;\n      callback(currentDate);\n    });\n  }\n\n  //check previous data \n  checkHistory(params,callback)\n  {\n    const endpoint = `${API_BASE_URL}/check_history`;\n    axios\n      .get(endpoint, {\n        params: params\n      })\n      .then(res => {\n        callback(res.data);\n      });\n  }\n\n  //cumulative for history\n  history_cumulative(params, callback) {\n    const endpoint = `${API_BASE_URL}/history_cumulative`;\n    axios\n      .get(endpoint, {\n        params: params\n      })\n      .then(res => {\n        callback(res.data);\n      });\n  }\n\n  //get all quarantine score at a week, parameter: weeks\n  scores_all(params, callback) {\n    const endpoint = `${API_BASE_URL}/scores_all`;\n    axios\n      .get(endpoint, {\n        params: params\n      })\n      .then(res => {\n        callback(res.data);\n      });\n  }\n\n  //get all, parameter: state, country, weeks\n  scores(params, callback) {\n    const endpoint = `${API_BASE_URL}/scores`;\n    axios\n      .get(endpoint, {\n        params: params\n      })\n      .then(res => {\n        callback(res.data);\n      });\n  }\n\n  //get the latest date which \n  latest_score_date(callback) {\n    const endpoint =  `${API_BASE_URL}/latest_score_date`;\n    axios.get(endpoint).then(res => {\n      const latestDate = res.data;\n      callback(latestDate);\n    });\n  }\n\n  //get the death at latest time\n  cumulative_death(params, callback) {\n    const endpoint = `${API_BASE_URL}/cumulative_death`;\n    axios\n      .get(endpoint, {\n        params: params\n      })\n      .then(res => {\n        callback(res.data);\n      });\n  }\n}\n\nexport default ModelAPI;\n","export function areaToStr(a) {\n  return `${a.country}${a.state ? \" / \" + a.state : \"\"}`;\n}\n\nexport function strToArea(s) {\n  const words = s.split(\"/\");\n\n  return {\n    country: words[0].trim(),\n    state: words.length === 2 ? words[1].trim() : \"\"\n  };\n}\n\nexport function modelToStr(a) {\n  return `${a.name}`;\n}\n","import React, { Component } from \"react\";\nimport { Circle, Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport ModelAPI from \"./modelapi\";\nimport { areaToStr, strToArea } from \"./covid19util\";\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\nimport am4geodata_chinaLow from \"@amcharts/amcharts4-geodata/chinaLow\";\nimport am4geodata_canadaLow from \"@amcharts/amcharts4-geodata/canadaLow\";\nimport am4geodata_australiaLow from \"@amcharts/amcharts4-geodata/australiaLow\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nconst HEAT_MAP_MIN_COLOR = \"#fcbba0\";\nconst HEAT_MAP_MAX_COLOR = \"#66000d\";\nconst MAP_HOVER_COLOR = \"#e43027\";\n\nam4core.useTheme(am4themes_animated);\n\nclass Covid19Map extends Component {\n  constructor() {\n    super();\n    this.modelAPI = new ModelAPI();\n\n    this.state = {\n      areasList : [],\n      showState: false\n    }\n\n    this.modelAPI.areas(allAreas =>\n      this.setState({\n        areasList: allAreas\n      })\n    );\n  }\n\n  componentDidMount() {\n    this.props.triggerRef(this);\n    this.fetchData(this.props.dynamicMapOn);\n  }\n\n  onShowState = (value) =>{\n    this.setState({\n      showState: value\n    });\n  }\n\n  fetchData(dynamicMapOn) {\n    if (!dynamicMapOn || this.props.model === \"\") {\n      //without dynamic map,show to cumulative cases to date\n      if (this.props.dataType === \"confirmed\")\n      {\n        this.modelAPI.cumulative_infections(cumulativeInfections => {\n          let heatmapData = cumulativeInfections.map(d => {\n            return {\n              id: d.area.iso_2,\n              // Adjust all heatmap values by log scale.\n              value: d.value > 0 ? Math.log(d.value) : 0,\n              // Store the true value so we can display tooltips correctly.\n              valueTrue: d.value,\n              area: d.area\n            };\n          });\n          this.setState({ heatmapData }, this.createChart);\n        });\n      }\n      else\n      {\n        this.modelAPI.cumulative_death({\n          days: 0\n        },cumulativeDeath => {\n          let heatmapData = cumulativeDeath.map(d => {\n            return {\n              id: d.area.iso_2,\n              // Adjust all heatmap values by log scale.\n              value: d.value > 0 ? Math.log(d.value) : 0,\n              // Store the true value so we can display tooltips correctly.\n              valueTrue: d.value,\n              area: d.area\n            };\n          });\n          this.setState({ heatmapData }, this.createChart);\n        });\n      }\n      \n    } else {\n      //with dynamic map \n      if (this.props.statistic === \"cumulative\"){\n        if (this.props.days > 0)\n        {\n          this.modelAPI.predict_all({\n            days: this.props.days,\n            model: this.props.model\n          }, cumulativeInfections => {\n            console.log(cumulativeInfections);\n            let heatmapData = cumulativeInfections.map(d => {\n              return {\n                id: d.area.iso_2,\n                // Adjust all heatmap values by log scale.\n                value: d.value > 0 ? Math.log(d.value) : 0,\n                // Store the true value so we can display tooltips correctly.\n                valueTrue: d.value,\n                area: d.area\n              };\n            });\n            this.setState({ heatmapData }, this.resetChart);\n          });\n        }\n        else\n        {\n          // show history cumulative\n            this.modelAPI.history_cumulative({\n              days: this.props.days\n            }, historyCumulative => {\n              let heatmapData = historyCumulative.map(d => {\n                if (this.props.dataType === \"confirmed\")\n                {\n                  return {\n                    id: d.area.iso_2,\n                    // Adjust all heatmap values by log scale.\n                    value: d.value > 0 ? Math.log(d.value) : 0,\n                    // Store the true value so we can display tooltips correctly.\n                    valueTrue: d.value,\n                    area: d.area\n                  };\n                }\n                else\n                {\n                  return {\n                    id: d.area.iso_2,\n                    // Adjust all heatmap values by log scale.\n                    value: d.deathValue > 0 ? Math.log(d.deathValue) : 0,\n                    // Store the true value so we can display tooltips correctly.\n                    valueTrue: d.deathValue,\n                    area: d.area\n                  }\n                }\n                \n              });\n              this.setState({ heatmapData }, this.resetChart);\n            });\n\n        }\n      }\n      else\n      {\n        //new cases\n        if (this.props.days>0)\n        {\n          //prediction\n          this.modelAPI.predict_all({\n            days: this.props.days,\n            model: this.props.model\n          }, cumulativeInfections => {\n            //if days is one, we need data from days = 0, which is in history_cumulative\n            if (this.props.days > 1)\n            {\n              this.modelAPI.predict_all({\n                days: this.props.days - 1,\n                model: this.props.model\n              }, previousCumulative =>{\n                let heatmapData = cumulativeInfections.map((d, index) =>{\n                  return {\n                    id: d.area.iso_2,\n                    value: d.value - previousCumulative[index].value > 0 ? Math.log(d.value - previousCumulative[index].value): 0,\n                    valueTrue:  d.value - previousCumulative[index].value > 0? d.value - previousCumulative[index].value: 0,\n                    area: d.area\n                  }\n                });\n                this.setState({ heatmapData }, this.resetChart);\n              });\n            }\n            else\n            {\n              this.modelAPI.history_cumulative({\n                days: this.props.days - 1\n              }, previousCumulative =>{\n                let heatmapData = cumulativeInfections.map((d, index) =>{\n                  if (this.props.dataType === \"confirmed\")\n                  {\n                    return {\n                      id: d.area.iso_2,\n                      value: d.value - previousCumulative.find(x => x.area.iso_2 === d.area.iso_2).value > 0 ? Math.log(d.value - previousCumulative.find(x => x.area.iso_2 === d.area.iso_2).value ): 0,\n                      valueTrue:  d.value - previousCumulative.find(x => x.area.iso_2 === d.area.iso_2).value > 0?\n                                  d.value - previousCumulative.find(x => x.area.iso_2 === d.area.iso_2).value:0,\n                      area: d.area\n                    }\n                  }\n                  else\n                  {\n                    return {\n                      id: d.area.iso_2,\n                      value: d.deathValue - previousCumulative.find(x => x.area.iso_2 === d.area.iso_2).deathValue > 0 ? Math.log(d.deathValue - previousCumulative.find(x => x.area.iso_2 === d.area.iso_2).deathValue ): 0,\n                      valueTrue:  d.deathValue - previousCumulative.find(x => x.area.iso_2 === d.area.iso_2).deathValue > 0?\n                                  d.deathValue - previousCumulative.find(x => x.area.iso_2 === d.area.iso_2).deathValue:0,\n                      area: d.area\n                    }\n                  }\n                  \n                });\n                this.setState({ heatmapData }, this.resetChart);\n              });\n            }\n          });\n        }\n        else\n        {\n          //history\n          this.modelAPI.history_cumulative({\n            days: this.props.days,\n            model: this.props.model\n          }, historyInfections => {\n            this.modelAPI.history_cumulative({\n              days: this.props.days - 1,\n              model: this.props.model\n            }, nextDayCumulative =>{\n              let heatmapData = historyInfections.map((d, index) =>{\n                if (this.props.dataType === \"confirmed\")\n                {\n                  return {\n                    id: d.area.iso_2,\n                    value: d.value - nextDayCumulative[index].value > 0 ? Math.log(d.value - nextDayCumulative[index].value): 0,\n                    valueTrue: d.value - nextDayCumulative[index].value > 0 ? d.value - nextDayCumulative[index].value: 0,\n                    area: d.area\n                  }\n                }\n                else\n                {\n                  return{\n                    id: d.area.iso_2,\n                    value: d.deathValue - nextDayCumulative[index].deathValue > 0 ? Math.log(d.deathValue - nextDayCumulative[index].deathValue): 0,\n                    valueTrue: d.deathValue - nextDayCumulative[index].deathValue > 0 ? d.deathValue - nextDayCumulative[index].deathValue: 0,\n                    area: d.area\n                  }\n                }\n                \n              });\n              this.setState({ heatmapData }, this.resetChart);\n            });\n          });\n        }\n      }\n      \n    }\n  }\n\n  initChart() {\n    // Create map instance\n    this.chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n    // Set projection\n    this.chart.projection = new am4maps.projections.Mercator();\n  }\n\n  createChartSeries(seriesProps) {\n    const {statistic} = this.props;\n    // Create new map polygon series and copy over all given props.\n    let series = this.chart.series.push(new am4maps.MapPolygonSeries());\n    series = Object.assign(series, seriesProps);\n\n    let polygonTemplate = series.mapPolygons.template;\n\n    // Heatmap fill.\n    if (statistic === \"cumulative\")\n    {\n      series.heatRules.push({\n        property: \"fill\",\n        target: polygonTemplate,\n        min: am4core.color(HEAT_MAP_MIN_COLOR),\n        max: am4core.color(HEAT_MAP_MAX_COLOR),\n        minValue: 0,\n        maxValue: Math.log(5000000)\n      });\n    }\n    else \n    {\n      series.heatRules.push({\n        property: \"fill\",\n        target: polygonTemplate,\n        min: am4core.color(HEAT_MAP_MIN_COLOR),\n        max: am4core.color(HEAT_MAP_MAX_COLOR),\n        minValue: 0,\n        maxValue: Math.log(1000000)\n      });\n    }\n    \n\n    // Configure series tooltip. Display the true value of infections.\n    polygonTemplate.tooltipText = \"{name}: {valueTrue}\";\n    polygonTemplate.nonScalingStroke = true;\n    polygonTemplate.strokeWidth = 0.5;\n\n    // Create hover state and set alternative fill color.\n    let hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = am4core.color(MAP_HOVER_COLOR);\n\n    // Change mouse cursor to pointer.\n    polygonTemplate.cursorOverStyle = am4core.MouseCursorStyle.pointer;\n\n    // Create click handler. Apparently ALL the series in the chart must have\n    // click handlers activated, so if this function is not running double-check\n    // that other series also have click handlers.\n    const { onMapClick, onNoData} = this.props;\n    polygonTemplate.events.on(\"hit\", e => {\n      const { id, value, area, name} = e.target.dataItem.dataContext;\n      if (area){\n        onMapClick(area);\n      }\n      else\n      {\n        onNoData(name);\n      }\n    });\n\n    return series;\n  }\n\n  initChartInterface() {\n    const {showState} = this.state;\n    // Create a zoom control.\n    this.chart.zoomControl = new am4maps.ZoomControl();\n    this.chart.zoomControl.cursorOverStyle = am4core.MouseCursorStyle.pointer;\n\n    // Create a toggle button to show/hide states/provinces.\n    let button = this.chart.chartContainer.createChild(am4core.Button);\n    button.label.text = `${\n      showState ? \"Hide\" : \"Show\"\n      } States/Provinces`;\n    button.togglable = true;\n    button.padding(5, 5, 5, 5);\n    button.align = \"right\";\n    button.marginRight = 15;\n    button.cursorOverStyle = am4core.MouseCursorStyle.pointer;\n    button.events.on(\"hit\", () => {\n      this.onShowState(button.isActive);\n      const {showState} = this.state;\n      this.stateSeries.forEach(s => (s.disabled = !showState));\n      button.label.text = `${\n        showState ? \"Hide\" : \"Show\"\n        } States/Provinces`;\n    });\n  }\n\n  createChart() {\n    const { heatmapData } = this.state;\n\n    this.initChart();\n\n    const worldSeries = this.createChartSeries({\n      geodata: am4geodata_worldLow,\n      exclude: [\"AQ\"],\n      data: heatmapData\n    });\n\n    const chinaSeries = this.createChartSeries({\n      geodata: am4geodata_chinaLow,\n      data: heatmapData,\n      disabled: !this.state.showState\n    });\n\n    const usaSeries = this.createChartSeries({\n      geodata: am4geodata_usaLow,\n      data: heatmapData,\n      disabled: !this.state.showState\n    });\n\n    const canadaSeries = this.createChartSeries({\n      geodata: am4geodata_canadaLow,\n      data: heatmapData,\n      disabled: !this.state.showState\n    });\n\n    const australiaSeries = this.createChartSeries({\n      geodata: am4geodata_australiaLow,\n      data: heatmapData,\n      disabled: !this.state.showState\n    });\n\n    this.stateSeries = [chinaSeries, usaSeries, canadaSeries, australiaSeries];\n\n    this.initChartInterface();\n\n    // worldSeries.data = [\n    // {\n    //   id: \"US\",\n    //   disabled: true\n    // },\n    // {\n    //   id: \"China\",\n    //   disabled: true\n    // }\n    // ];\n\n    // Set up heat legend\n    // let heatLegend = this.chart.createChild(am4maps.HeatLegend);\n    // heatLegend.series = worldSeries;\n    // heatLegend.align = \"right\";\n    // heatLegend.valign = \"bottom\";\n    // heatLegend.width = am4core.percent(20);\n    // heatLegend.marginRight = am4core.percent(4);\n    // heatLegend.minValue = 0;\n    // heatLegend.maxValue = Math.max(...heatmapData.map(d => d.valueTrue));\n    //\n    // // Set up custom heat map legend labels using axis ranges\n    // let minRange = heatLegend.valueAxis.axisRanges.create();\n    // minRange.value = heatLegend.minValue;\n    // minRange.label.text = heatLegend.minValue;\n    // let maxRange = heatLegend.valueAxis.axisRanges.create();\n    // maxRange.value = heatLegend.maxValue;\n    // maxRange.label.text = heatLegend.maxValue;\n    //\n    // // Blank out internal heat legend value axis labels\n    // heatLegend.valueAxis.renderer.labels.template.adapter.add(\"text\", function(\n    //   labelText\n    // ) {\n    //   return \"\";\n    // });\n  }\n\n  resetChart() {\n    const { heatmapData } = this.state;\n\n    const worldSeries = this.createChartSeries({\n      geodata: am4geodata_worldLow,\n      exclude: [\"AQ\"],\n      data: heatmapData\n    });\n\n    const usaSeries = this.createChartSeries({\n      geodata: am4geodata_usaLow,\n      data: heatmapData,\n      disabled: !this.state.showState\n    });\n\n    this.stateSeries = [usaSeries];\n\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    \n    return <div id=\"chartdiv\"></div>;\n  }\n}\n\nexport default Covid19Map;\n","import React, { PureComponent } from \"react\";\nimport Covid19Graph from \"./covid19graph\";\nimport Covid19Map from \"./covid19map\";\nimport ModelAPI from \"./modelapi\";\nimport { areaToStr, strToArea, modelToStr } from \"./covid19util\";\nimport { test_data } from \"./test_data\";\nimport \"./covid19predict.css\";\n\nimport {\n  Form,\n  Select,\n  InputNumber,\n  Button,\n  Radio,\n  Checkbox,\n  Slider,\n  Tooltip,\n  Switch,\n  Popover,\n  Alert,\n  Row,\n  Col\n} from \"antd\";\n\n\nimport {\n  InfoCircleOutlined\n} from '@ant-design/icons';\nimport { value } from \"numeral\";\n\nconst { Option } = Select;\n\nclass Covid19Predict extends PureComponent {\n  handleYScaleSelect = e => {\n    this.setState({\n      yScale: e.target.value\n    });\n  };\n\n  handleStatisticSelect = e => {\n    this.setState({\n      statistic: e.target.value\n    }, () => {\n      this.reloadAll();\n    });\n\n  };\n\n  handleDataTypeSelect = e => {\n    if (e.target.value === \"confirmed\") {\n      this.modelAPI.infection_models(infection_models => {\n        this.setState({\n          modelsList: infection_models,\n          dataType: e.target.value,\n          models: ['SI-kJalpha - No under-reported positive cases (default)']\n        }, ()=>{\n          this.formRef.current.setFieldsValue({\n            models: this.state.models\n          });\n          this.reloadAll();\n          if (!this.state.dynamicMapOn)\n          {\n            this.map.fetchData(this.state.dynamicMapOn);\n          }\n        });\n      });\n    } \n    else {\n      this.modelAPI.death_models(death_models =>{\n          this.setState({\n            modelsList: death_models,\n            dataType: e.target.value,\n            models: ['SI-kJalpha - No under-reported positive cases (death prediction)']\n          }, ()=>{\n            this.formRef.current.setFieldsValue({\n              models: this.state.models\n            });\n            this.reloadAll();\n            if (!this.state.dynamicMapOn)\n            {\n              this.map.fetchData(this.state.dynamicMapOn);\n            }\n          }); \n        });\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      areas: this.props.areas || [],\n      areasList: [],\n      models: this.props.models || ['SI-kJalpha - No under-reported positive cases (default)'],\n      modelsList: [],\n      currentDate: \"\",\n      distancingOn: true,\n      distancingOff: false,\n      mainGraphData: {},\n      days: 0,\n      dynamicMapOn: false,\n      dataType: \"confirmed\",\n      statistic: \"cumulative\",\n      yScale: \"linear\",\n      noDataError: false,\n      errorDescription: \"\"\n    };\n\n    this.addAreaByStr = this.addAreaByStr.bind(this);\n    this.removeAreaByStr = this.removeAreaByStr.bind(this);\n    this.onValuesChange = this.onValuesChange.bind(this);\n    this.onMapClick = this.onMapClick.bind(this);\n    this.onDaysToPredictChange = this.onDaysToPredictChange.bind(this);\n    this.switchDynamicMap = this.switchDynamicMap.bind(this);\n    this.onAlertClose = this.onAlertClose.bind(this);\n    this.onNoData = this.onNoData.bind(this);\n    this.generateMarks = this.generateMarks.bind(this);\n    this.handleModelChange = this.handleModelChange.bind(this);\n    this.handleDataTypeSelect = this.handleDataTypeSelect.bind(this);\n    this.handleStatisticSelect = this.handleStatisticSelect.bind(this);\n    this.handleYScaleSelect = this.handleYScaleSelect.bind(this);\n  }\n\n  componentWillMount = ()=>{\n    this.addAreaByStr('US');\n\n    this.formRef = React.createRef();\n\n    this.modelAPI = new ModelAPI();\n\n    this.modelAPI.areas(allAreas =>\n      this.setState({\n        areasList: allAreas\n      })\n    );\n\n    this.modelAPI.infection_models(infectionModels =>\n      this.setState({\n        modelsList: infectionModels\n      })\n    );\n\n    this.modelAPI.getCurrentDate(currentDate => \n      this.setState({\n        currentDate: currentDate[0].date\n      })\n    );\n  }\n\n  onMapClick(area) {\n    if (!this.areaIsSelected(area)) {\n      this.addAreaByStr(areaToStr(area));\n    }\n  }\n\n  /**\n   * Returns true if the area is already selected by the user.\n   */\n  areaIsSelected(area) {\n    if (this.state.areas && area) {\n      const newAreaStr = areaToStr(area);\n      return this.state.areas.includes(newAreaStr);\n    }\n    return false;\n  }\n\n  addAreaByStr(areaStr) {\n    const areaObj = strToArea(areaStr);\n\n    this.setState(\n      prevState => ({\n        areas: [...prevState.areas, areaStr]\n      }),\n      () => {\n        // check if days is positive or negative to decide whether check history or predict future\n        if (this.state.days >= 0){\n          this.modelAPI.predict(\n            {\n              state: areaObj.state,\n              country: areaObj.country,\n              models: this.state.models,\n              days: this.state.days,\n              distancingOn: this.state.distancingOn,\n              distancingOff: this.state.distancingOff\n            },\n            data => {\n              this.setState(prevState => ({\n                mainGraphData: {\n                  ...prevState.mainGraphData,\n                  [areaStr]: data\n                }\n              }));\n            }\n          );\n        }\n        else{\n          this.modelAPI.checkHistory(\n            {\n              state: areaObj.state,\n              country: areaObj.country,\n              days: this.state.days\n            }, \n            data =>{\n              this.setState(prevState => ({\n                mainGraphData: {\n                  ...prevState.mainGraphData,\n                  [areaStr]: data\n                }\n              }));\n            }\n\n          );\n        }\n\n        this.formRef.current.setFieldsValue({\n          areas: this.state.areas\n        });\n      }\n    );\n  }\n\n  removeAreaByStr(targetAreaStr) {\n    this.setState(prevState => {\n      return {\n        // Filter out the area / graph data corresponding to the target area\n        // string.\n        areas: prevState.areas.filter(areaStr => areaStr !== targetAreaStr),\n        mainGraphData: Object.keys(prevState.mainGraphData)\n          .filter(areaStr => areaStr !== targetAreaStr)\n          .reduce((newMainGraphData, areaStr) => {\n            return {\n              ...newMainGraphData,\n              [areaStr]: prevState.mainGraphData[areaStr]\n            };\n          }, {})\n      };\n    });\n  }\n\n  /**\n   * Returns true if the model is already selected by the user.\n   */\n  modelIsSelected(model) {\n    if (this.state.models && model) {\n      const newModelStr = modelToStr(model);\n      return this.state.models.includes(newModelStr);\n    }\n    return false;\n  }\n\n  /**\n   * onValuesChange is called whenever the values in the form change. Note that\n   * days to predict is handled separately by onDaysToPredictChange.\n   */\n  onValuesChange(changedValues, allValues) {\n    if (\"socialDistancing\" in changedValues) {\n      // If either the social distancing or model parameters were changed, we\n      // clear our data and do a full reload. We purposely ignore days to\n      // predict here (see onDaysToPredictChange).\n\n      this.setState(\n        {\n          distancingOn: allValues.socialDistancing.includes(\"distancingOn\"),\n          distancingOff: allValues.socialDistancing.includes(\"distancingOff\")\n        },\n        () => {\n          this.reloadAll();\n        }\n      );\n    } else {\n      // If we're here it means the user either added or deleted an area, so we\n      // can do a union / intersection to figure out what to add/remove.\n      const prevAreas = this.state.areas;\n      const newAreas = allValues.areas;\n\n      const areasToAdd = newAreas.filter(\n        areaStr => !prevAreas.includes(areaStr)\n      );\n      const areasToRemove = prevAreas.filter(\n        areaStr => !newAreas.includes(areaStr)\n      );\n\n      areasToAdd.forEach(this.addAreaByStr);\n      areasToRemove.forEach(this.removeAreaByStr);\n    }\n  }\n\n  handleModelChange(value) {\n    this.setState({\n        models: value\n     }, () => {\n      this.reloadAll();\n    });\n  }\n\n  /**\n   * onDaysToPredictChange is bound to the 'onAfterChange' prop for the\n   * slider component, so this function will only be called on the mouseup\n   * event (to reduce database load).\n   */\n  onDaysToPredictChange(days) {\n    const prevAreas = this.state.areas;\n    this.setState({ days }, () => {\n      this.reloadAll();\n    });\n  }\n\n  // Set the reference to the map component as a child-component.\n  bindRef = ref => { \n    this.map = ref \n  }\n\n  /**\n   * reloadAll refreshes the prediction data for all currently-selected\n   * countries.\n   */\n  reloadAll() {\n    const prevAreas = this.state.areas;\n    this.setState(\n      {\n        areas: [],\n        mainGraphData: {}\n      },\n      () => {\n        // Add all the areas back.\n        prevAreas.forEach(this.addAreaByStr);\n\n        // TODO: Add code for stuff after reload here!\n        // Force reload the heatmap, only refetch data when dynamic map is on\n        if (this.state.dynamicMapOn && this.state.models.length !== 0) {\n          this.map.fetchData(this.state.dynamicMapOn);\n        }\n\n      }\n    );\n  }\n\n  switchDynamicMap(checked) {\n    this.setState({\n      dynamicMapOn: checked\n    });\n    this.map.fetchData(checked);\n  }\n\n  //when closing the alert\n  onAlertClose = ()=>{\n    this.setState({\n      noDataError: false\n    });\n  }\n\n  //when encounter an no data error\n  onNoData = (name) =>{\n    this.setState({\n      noDataError: true,\n      errorDescription: `There is currently no data for ${name}`\n    })\n  }\n\n  generateMarks = ()=>{\n    const {currentDate, days} = this.state;\n    let date = new Date(`${currentDate}T00:00`);\n    let firstDate = new Date(2020,0,22);\n    //get the date of the selected date on slider\n    date.setDate(date.getDate(Date) + days);\n    let marks = {};\n    marks[days] = `${date.getMonth()+1}/${date.getDate()}`;\n    // marks for future\n    let i = days+7\n    while (i < days+50 && i<=99)\n    {\n       date.setDate(date.getDate() + 7);\n       marks[i] = `${date.getMonth()+1}/${date.getDate()}`;\n       i+=7;\n    }\n    // marks for history\n    date = new Date(`${currentDate}T00:00`);\n    date.setDate(date.getDate(Date) + days);\n    date.setDate(date.getDate() - 7);\n    i = days-7;\n    while (date >= firstDate && i > days-30){\n      marks[i] = `${date.getMonth()+1}/${date.getDate()}`;\n      date.setDate(date.getDate() - 7);\n      i -= 7;\n    }\n    return marks;\n  }\n\n  getDaysToFirstDate = ()=>{\n    const {currentDate} = this.state;\n    let date = new Date(`${currentDate}T00:00`);\n    let firstDate = new Date(2020,0,22);\n    return Math.ceil(Math.abs(date - firstDate)/ (1000 * 60 * 60 * 24));\n  }\n\n  render() {\n    const {\n      areas,\n      areasList,\n      models,\n      modelsList,\n      days,\n      mainGraphData,\n      dynamicMapOn,\n      dataType,\n      statistic,\n      yScale,\n      noDataError,\n      errorDescription\n    } = this.state;\n    const marks = this.generateMarks();\n    const daysToFirstDate = this.getDaysToFirstDate();\n    // Only show options for countries that have not been selected yet.\n    const countryOptions = areasList\n      .filter(area => !this.areaIsSelected(area))\n      .map(areaToStr)\n      .sort()\n      .map(s => {\n        return <Option key={s}> {s} </Option>;\n      });\n\n    const modelOptions = modelsList\n      .filter(model => !this.modelIsSelected(model))\n      .map(model => {\n        return (\n          <Option key={model.name} value={model.name}>\n            <Tooltip title={model.description} placement=\"right\">\n              {model.name}\n            </Tooltip>\n          </Option>\n        );\n      });\n\n      // The clarification message to be shown for the \"social distancing\" option.\n      const SOCIAL_DISTANCING_CLARIFICATION = (\n        <p>\n          The trend until March 18th has been used as a proxy for \"Social distancing off\". <br />\n          For modeling details, please see: \n          <a href=\"https://arxiv.org/abs/2004.11372\"> https://arxiv.org/abs/2004.11372</a>.\n        </p>\n      );\n    return (\n      <div className=\"covid-19-predict\">\n        <Row type=\"flex\" justify=\"space-around\">\n        {/* <div className=\"left-col\"> */}\n        <Col span={10}>\n        {noDataError?\n          <Alert\n          message= {`${errorDescription}`}\n          description= \"Please wait for our updates.\"\n          type=\"error\"\n          closable\n          onClose={this.onAlertClose}\n        />: null\n        }\n          <div className=\"form-wrapper\">\n            <Form\n              ref={this.formRef}\n              onValuesChange={this.onValuesChange}\n              initialValues={{\n                areas: areas,\n                models: models,\n                socialDistancing: [\"distancingOn\"]\n              }}\n            >\n              <Form.Item\n                label=\"Areas\"\n                name=\"areas\"\n                rules={[{ required: true, message: \"Please select areas!\" }]}\n              >\n                <Select\n                  mode=\"multiple\"\n                  style={{ width: \"100%\" }}\n                  placeholder=\"Select Areas\"\n                >\n                  {countryOptions}\n                </Select>\n              </Form.Item>\n              <Form.Item\n                label=\"Models:\"\n                name=\"models\"\n                rules={[\n                  { required: true, message: \"Please select a prediction model!\" }\n                ]}\n              >\n                <Select\n                  mode=\"multiple\"\n                  style={{ width: \"100%\" }}\n                  placeholder=\"Select Prediction Models\"\n                  initialvalue = {models}\n                  onChange = {this.handleModelChange}\n                >\n                  {modelOptions}\n                </Select>\n              </Form.Item>\n              <Form.Item\n                label=\"Date to Predict\"\n                name=\"days\"\n                rules={[\n                  { required: true, message: \"Please select number of days!\" }\n                ]}\n              >\n                <Slider\n                  marks={marks}\n                  min={days-30>=-daysToFirstDate?days-30:-daysToFirstDate}\n                  initialValue={days}\n                  max={days+50<=99?days+50:99}\n                  onAfterChange={this.onDaysToPredictChange}\n                />\n              </Form.Item>\n\n              <Popover \n                content={SOCIAL_DISTANCING_CLARIFICATION} \n                title=\"Social Distancing Clarification\"\n                placement=\"topLeft\"\n              >\n              <Form.Item label=\"Social Distancing\" name=\"socialDistancing\">\n                <Checkbox.Group>\n                  <Checkbox defaultChecked value=\"distancingOn\">\n                    Current Trend\n                  </Checkbox>\n                  <Checkbox value=\"distancingOff\"> \n                    Social Distancing Off\n                  </Checkbox>\n                </Checkbox.Group>\n              </Form.Item>\n              </Popover>\n            </Form>\n            <div>Data Type:&nbsp;&nbsp;  \n              <Radio.Group\n                value={dataType}\n                onChange={this.handleDataTypeSelect}\n              >\n                <Radio value=\"confirmed\">Confirmed Cases</Radio>\n                <Radio value=\"death\">Deaths</Radio>\n              </Radio.Group>\n            </div>\n            <br />\n            <div>Statistic:&nbsp;&nbsp;  \n              <Radio.Group\n                value={statistic}\n                onChange={this.handleStatisticSelect}\n              >\n                <Radio value=\"cumulative\">Cumulative Cases</Radio>\n                <Radio value=\"delta\">New Cases</Radio>\n              </Radio.Group>\n            </div>\n            <br />\n            <div>\n              Scale:&nbsp;&nbsp;  \n              <Radio.Group value={yScale} onChange={this.handleYScaleSelect}>\n                <Radio value=\"linear\">linear</Radio>\n                <Radio value=\"log\">logarithmic</Radio>\n              </Radio.Group>\n            </div>\n            <br />\n            <p>\n              Dynamic Map:&nbsp;&nbsp;  \n              <Switch \n                onChange={this.switchDynamicMap} \n              />\n            </p>\n          </div>\n        </Col>\n        <Col span={14}>\n          <div className=\"map-wrapper\">\n            <Covid19Map className=\"map\"\n              triggerRef={this.bindRef}\n              dynamicMapOn={dynamicMapOn}\n              days={days}\n              model={this.state.models == null || this.state.models.length ===0? \"\" : this.state.models[this.state.models.length-1]}\n              onMapClick={this.onMapClick} \n              onNoData = {this.onNoData}\n              statistic={statistic}\n              dataType = {dataType}\n            />\n          </div>\n        {/* </div> */}\n        </Col>\n        </Row>\n        {areas.length?\n          <Row>\n          <Col span={24}>\n          {/* <div className=\"right-col\"> */}\n            <div className=\"graph-wrapper\">\n              <Covid19Graph\n                data={mainGraphData}\n                dataType={dataType}\n                onNoData = {this.onNoData}\n                statistic={statistic}\n                yScale={yScale}\n              ></Covid19Graph>\n            </div>\n          {/* </div> */}\n          </Col>\n          </Row>\n        : null}\n      </div>\n    );\n  }\n}\n\nexport default Covid19Predict;\n","import React, { Component } from \"react\";\nimport \"./aboutus.css\";\nimport \"./covid19app.css\";\n\nclass AboutUs extends Component {\n    render() {\n        return (\n            <div className=\"page-wrapper\">\n                <div className=\"article\">\n                    <h1 className=\"article-title\">ReCOVER: Accurate Predictions and Resource Management for COVID-19 Epidemic Response</h1>\n                    <p className=\"article-paragraph\">\n                        Accurate forecasts of COVID-19 is central to resource management and building strategies to deal with the epidemic. \n                        This is a NSF-funded project on COVID-19 forecasting directed \n                        by Viktor K. Prasanna (<a className=\"article-anchor\" href=\"mailto:prasanna@usc.edu\">prasanna@usc.edu</a>) and\n                        Ajitesh Srivastava (<a className=\"article-anchor\" href=\"mailto:ajiteshs@usc.edu\">ajiteshs@usc.edu</a>) \n                        from the Data Science Lab in the University of Southern California. \n                    </p>\n                    <h2>Our Model</h2>\n                    <p className=\"article-paragraph\">\n                        We use our own epidemic model called SI-kJalpha -- Heterogeneous Infection Rate with Human Mobility, which is a \n                        preliminary version of what we have successfully used \n                        during <a className=\"article-anchor\" href=\"https://news.usc.edu/83180/usc-engineers-earn-national-recognition-for-predicting-disease-outbreaks/\" target=\"_blank\">\n                            DARPA Grand Challenge 2014\n                        </a>.  \n                        By linearizing the model and using weighted least squares, \n                        our model is able to quickly adapt to changing trends and provide extremely accurate predictions of confirmed cases \n                        at the level of countries and states of the United States. Training the model to forecast also enables learning characteristics \n                        of the epidemic. In particular, we have shown that changes in model parameters over time can help us quantify how well a state \n                        or a country has responded to the epidemic. The variations in parameters also allow us to forecast different scenarios such as \n                        what would happen if we were to disregard social distancing suggestions. \n                        This work is supported by National Science Foundation Award No. 2027007 (RAPID)\n                    </p>\n                    <p className=\"article-paragraph\">\n                        Details of our initial approach can be found in our <a className=\"article-anchor\" href=\"https://www.youtube.com/watch?v=ll6k8wlxOFo\" target=\"_blank\">webinar</a>.\n                    </p>\n                    <p className=\"article-paragraph\">\n                        The Github repository for this project is <a className=\"article-anchor\" href=\"https://github.com/scc-usc/ReCOVER-COVID-19\" target=\"_blank\">publicly available</a> .\n                    </p>\n                    <p className=\"article-paragraph\">\n                        The matlab code for forecasting is also made available on <a className=\"article-anchor\" href=\"https://www.mathworks.com/matlabcentral/fileexchange/75281-recover\" target=\"_blank\">File Exchange</a>.\n                    </p>\n                    <p className=\"article-paragraph\">\n                        The code of the prediction model and this web application is contributed by Ajitesh Srivastava, Jamin Chen, Frost Tianjian Xu, \n                        and Bob Xiaochen Yang.\n                    </p>\n                    <h2>USC Data Science Lab</h2>\n                    <p className=\"article-paragraph\">\n                        The USC Data Science Lab focuses on applying machine learning, data mining, \n                        and network analysis to real-world problems in society and industry. \n                        Please find more information and other research projects <a className=\"article-anchor\" href=\"https://sites.usc.edu/dslab/\" target=\"_blank\"> on \n                        our website</a>.\n                    </p>\n                    <h2>Related Publications</h2>\n                    <p className=\"disclaimer\">\n                        <b>Disclaimer:</b> The following papers may have copyright restrictions. Downloads will have to adhere to these restrictions. \n                        They may not be reposted without explicit permission from the copyright holder. Any opinions, findings, and conclusions or \n                        recommendations expressed in these materials are those of the author(s) and do not necessarily reflect the views of the sponsors \n                        including National Science Foundation (NSF), Defense Advanced Research Projects Agency (DARPA), and any other sponsors listed in \n                        the publications.\n                    </p>\n                    <ol className=\"article-paragraph\">\n                        <li>\n                            Ajitesh Srivastava and Viktor K. Prasanna, \n                            <a className=\"article-anchor\" href=\"https://arxiv.org/abs/2004.11372\" target=\"_blank\"> “Learning to Forecast and Forecasting to Learn from the COVID-19 Pandemic”</a> [arXiv].\n                        </li>\n                    </ol>\n\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default AboutUs;","import React, { Component } from \"react\";\nimport { ResponsiveLine} from \"@nivo/line\";\nimport moment from \"moment\";\nimport numeral from \"numeral\";\nimport {\n  red,\n  gold,\n  lime,\n  cyan,\n  geekblue,\n  purple,\n  magenta\n} from \"@ant-design/colors\";\n\nfunction getLineColor(index) {\n  const colors = [\n    red,\n    gold,\n    lime,\n    cyan,\n    geekblue,\n    purple,\n    magenta\n  ];\n\n  return colors[index % colors.length];\n}\n\nconst DashedLine = ({ series, lineGenerator, xScale, yScale }) => {\n  return series.map(({ id, data, color, predicted, distancing }) => {\n    let style = {\n      strokeWidth: 7\n    };\n\n    // Add custom style if predicted.\n    if (predicted) {\n      if (distancing) {\n        style.strokeDasharray = \"6, 4\";\n      } else {\n        // Display a sparser pattern for no social distancing.\n        style.strokeDasharray = \"2, 6\";\n      }\n    }\n\n    return (\n      <path\n        key={id}\n        d={lineGenerator(\n          data.map(d => ({\n            x: xScale(d.data.x),\n            y: yScale(d.data.y)\n          }))\n        )}\n        fill=\"none\"\n        stroke={color}\n        style={style}\n      />\n    );\n  });\n};\n\nconst theme = {\n  axis: {\n    ticks: {\n      text: {\n        fontSize: 18\n      }\n    },\n    legend: {\n      text: {\n        fontSize: 18\n      }\n    }\n  },\n  legends: {\n    text: {\n      fontSize: 18\n    }\n  }\n};\n\nclass ScoreGraph extends Component {\n  parseDate(dateStr) {\n    let [year, month, day] = dateStr.split(\"-\").map(Number);\n    // Month in JS is 0-based.\n    month -= 1;\n    return new Date(year, month, day);\n  }\n\n  /**\n   * Given a time series returned by the predict endpoint, getCumulativeData\n   * returns it in Nivo format.\n   */\n  getCumulativeData(data) {\n    return data.map(d => ({\n      x: this.parseDate(d.date),\n      y: d.value\n    }));\n  }\n\n  // processData properly formats the given data, and performs special\n  // operations based on parameter values.\n  processData(data) {\n    let retData = this.getCumulativeData(data);\n\n    return retData;\n  }\n\n  /**\n   * getDataMax returns the maximum value present in the data supplied to the\n   * graph.\n   */\n  getDataMax() {\n    const { data } = this.props;\n\n    let max = 0;\n\n    Object.keys(data).forEach(area => {\n      const { observed } = data[area];\n      max = Math.max(max, Math.max(...observed.map(({ value }) => value)));\n    });\n\n    return max;\n  }\n\n  /**\n   * getYAxisProps returns the corresponding Nivo line props for supporting\n   * different Y axis types (linear and log).\n   */\n  getYAxisProps() {\n    const linearAxisLeft = {\n      // Format large y numbers as their abbreviations.\n      format: y => numeral(y).format(\"0.[0]a\"),\n      orient: \"left\",\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: \"Dynamic Reproduction Number\",\n      legendOffset: -60,\n      legendPosition: \"middle\"\n    };\n\n    let logTickValues = [];\n    for (let i = 0; i <= Math.ceil(Math.log10(this.getDataMax())); i++) {\n      logTickValues.push(Math.pow(10, i));\n    }\n\n    // The 'axisLeft' prop for log scale is the same as for linear axis, except\n    // that the tick values must be supplied.\n    const logAxisLeft = {\n      ...linearAxisLeft,\n      tickValues: logTickValues\n    };\n\n    return {\n      axisLeft: linearAxisLeft,\n      yScale: {\n        type: \"linear\",\n        min: \"auto\",\n        max: \"auto\"\n      }\n    };\n  }\n\n  render() {\n    let { data } = this.props;\n    // chartData contains the data that we will pass into Nivo line chart.\n    let chartData = [];\n    // colors holds hex values for each line in the chart.\n    let colors = [];\n    // Sort the data by area name (so we have a consistent coloring) and then\n    // loop over each area.\n    Object.keys(data)\n      .sort()\n      .forEach((area, idx) => {\n        const lineColor = getLineColor(idx);\n        const observedData = data[area].observed;\n        const upperBound = observedData.map(data=>{\n           return {\n             date: data.date,\n             value: data.value + data.conf\n           }\n        });\n        const lowerBound = observedData.map(data=>{\n          return {\n            date: data.date,\n            value: data.value - data.conf\n          }\n       });\n       console.log(upperBound);\n       console.log(lowerBound);\n        // Add the mean\n        chartData.push({\n          id: area,\n          data: this.processData(observedData),\n          // 'predicted' is a custom prop that we add so later we can tell the\n          // difference between observed/predicted data when drawing the lines.\n          predicted: false\n        });\n\n        colors.push(lineColor[3]);\n\n        //add the upperbound\n        chartData.push({\n          id: `${area} upper bound`,\n          data: this.processData(upperBound),\n          // 'predicted' is a custom prop that we add so later we can tell the\n          // difference between observed/predicted data when drawing the lines.\n          predicted: false\n        });\n        colors.push(lineColor[3]);\n\n        //add the lowerbound\n        chartData.push({\n          id: `${area} lower bound`,\n          data: this.processData(lowerBound),\n          // 'predicted' is a custom prop that we add so later we can tell the\n          // difference between observed/predicted data when drawing the lines.\n          predicted: false\n        });\n        colors.push(lineColor[3]);\n      });\n\n    // Determine whether we need to show weeks or months on the X axis.\n    let tickValues = \"every week\";\n\n    if (chartData.length > 0) {\n      // Calculate the minimum and maximum dates present in the data.\n      let minDate = chartData[0].data[0].x;\n      let maxDate = chartData[0].data[0].x;\n\n      chartData.forEach(({ data }) => {\n        data.forEach(({ x }) => {\n          minDate = Math.min(minDate, x);\n          maxDate = Math.max(maxDate, x);\n        });\n      });\n\n      minDate = moment(minDate);\n      maxDate = moment(maxDate);\n\n      // Switch to 'every month' if the date range is over a certain threshold.\n      const diffInDays = maxDate.diff(minDate, \"days\");\n      if (diffInDays > 150) {\n        tickValues = \"every month\";\n      }\n    }\n\n    return (\n      <ResponsiveLine\n        data={chartData}\n        colors={colors}\n        //50,50,50,80\n        margin={{ top: 10, right: 50, bottom: 70, left: 100 }}\n        xScale={{\n          type: \"time\",\n          format: \"native\",\n          precision: \"day\"\n        }}\n        axisBottom={{\n          // tickValues determines how often / with what values our 'format'\n          // func is called.\n          tickValues: tickValues,\n          // A custom 'format' func is required since all the x values are\n          // javascript Date objects.\n          format: date => {\n            return moment(date).format(\"M/D\");\n          },\n          orient: \"bottom\",\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: \"Date\",\n          legendOffset: 36,\n          legendPosition: \"middle\"\n        }}\n        // Set up the Y axis.\n        {...this.getYAxisProps()}\n        enableSlices=\"x\"\n        sliceTooltip={({ slice }) => {\n          return (\n            <div\n              style={{\n                background: \"white\",\n                padding: \"9px 12px\",\n                border: \"1px solid #ccc\"\n              }}\n            >\n              <div>\n                {// Grab the date from the first point, this will be the title of\n                // the tooltip.\n                moment(slice.points[0].data.x).format(\"MMM Do YYYY\")}\n              </div>\n              {slice.points.map(point => (\n                <div\n                  key={point.id}\n                  style={{\n                    color: point.serieColor,\n                    padding: \"3px 0\"\n                  }}\n                >\n                  <strong>{point.serieId}</strong>[\n                  {numeral(point.data.yFormatted).format(\"0.[0]a\")}]\n                </div>\n              ))}\n            </div>\n          );\n        }}\n        pointSize={20}\n        legends={[\n          {\n            anchor: \"top-left\",\n            direction: \"column\",\n            justify: false,\n            translateX: 0,\n            translateY: 0,\n            itemsSpacing: 0,\n            itemDirection: \"left-to-right\",\n            itemWidth: 80,\n            itemHeight: 20,\n            itemOpacity: 0.75,\n            symbolSize: 12,\n            symbolShape: \"circle\",\n            symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n            effects: [\n              {\n                on: \"hover\",\n                style: {\n                  itemBackground: \"rgba(0, 0, 0, .03)\",\n                  itemOpacity: 1\n                }\n              }\n            ]\n          }\n        ]}\n        layers={[\n          \"grid\",\n          \"markers\",\n          \"areas\",\n          \"crosshair\",\n          DashedLine,\n          \"slices\",\n          \"points\",\n          \"axes\",\n          \"legends\"\n        ]}\n        theme={theme}\n      />\n    );\n  }\n}\n\nexport default ScoreGraph;\n","import React, { Component } from \"react\";\nimport { Circle, Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport ModelAPI from \"../modelapi\";\nimport { areaToStr, strToArea } from \"../covid19util\";\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\nimport am4geodata_chinaLow from \"@amcharts/amcharts4-geodata/chinaLow\";\nimport am4geodata_canadaLow from \"@amcharts/amcharts4-geodata/canadaLow\";\nimport am4geodata_australiaLow from \"@amcharts/amcharts4-geodata/australiaLow\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nconst HEAT_MAP_MIN_COLOR = \"#85DB50\";\nconst HEAT_MAP_MAX_COLOR = \"#F33A21\";\nconst MAP_HOVER_COLOR = \"#83FE00\";\n\nam4core.useTheme(am4themes_animated);\n\nclass ScoreMap extends Component {\n    constructor() {\n      super();\n      this.modelAPI = new ModelAPI();\n  \n      this.state = {\n        areasList : [],\n        showState: false\n      }\n  \n      this.modelAPI.areas(allAreas =>\n        this.setState({\n          areasList: allAreas\n        })\n      );\n    }\n\n    componentDidMount() {\n        this.props.triggerRef(this);\n    }\n\n    onShowState = (value) =>{\n        this.setState({\n          showState: value\n        });\n    }\n\n    fetchData(dynamicMapOn)\n    {\n        if (!dynamicMapOn) {\n          //without dynamic map,show to latestscore\n          this.modelAPI.scores_all(\n            {\n                weeks: this.props.latestWeek,\n            } , scores => {\n              let heatmapData = scores.map(d => {\n              return {\n                id: d.area.iso_2,\n                value: d.value > 0 ? d.value: 0,\n                area: d.area,\n                conf: d.conf\n              };\n            });\n            this.setState({ heatmapData }, this.createChart);\n          });\n        } else {\n            this.modelAPI.scores_all(\n            {\n                weeks: this.props.weeks,\n            }, scores =>{\n            let heatmapData = scores.map(d => {\n                return {\n                    id: d.area.iso_2,\n                    value: d.value > 0 ? d.value: 0,\n                    area: d.area\n                };\n                });\n                this.setState({ heatmapData }, this.createChart);\n            });\n        }\n    }\n\n    initChart() {\n        // Create map instance\n        this.chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n        // Set projection\n        this.chart.projection = new am4maps.projections.Mercator();\n    }\n\n    createChartSeries(seriesProps) {\n        const {statistic} = this.props;\n        // Create new map polygon series and copy over all given props.\n        let series = this.chart.series.push(new am4maps.MapPolygonSeries());\n        series = Object.assign(series, seriesProps);\n    \n        let polygonTemplate = series.mapPolygons.template;\n    \n      \n        series.heatRules.push({\n            property: \"fill\",\n            target: polygonTemplate,\n            min: am4core.color(HEAT_MAP_MIN_COLOR),\n            max: am4core.color(HEAT_MAP_MAX_COLOR),\n            minValue: 0,\n            maxValue: 4\n        });\n\n        \n        // Configure series tooltip. Display the true value of infections.\n        polygonTemplate.tooltipText = \"{name}: {value}\";\n        polygonTemplate.nonScalingStroke = true;\n        polygonTemplate.strokeWidth = 0.5;\n    \n        // Create hover state and set alternative fill color.\n        let hs = polygonTemplate.states.create(\"hover\");\n        hs.properties.fill = am4core.color(MAP_HOVER_COLOR);\n    \n        // Change mouse cursor to pointer.\n        polygonTemplate.cursorOverStyle = am4core.MouseCursorStyle.pointer;\n    \n        // Create click handler. Apparently ALL the series in the chart must have\n        // click handlers activated, so if this function is not running double-check\n        // that other series also have click handlers.\n        const { onMapClick, onNoData} = this.props;\n        polygonTemplate.events.on(\"hit\", e => {\n          const { id, value, area, name} = e.target.dataItem.dataContext;\n          if (area){\n            onMapClick(area);\n          }\n          else\n          {\n            onNoData(name);\n          }\n        });\n        return series;\n    }\n\n    initChartInterface() {\n        // Create a zoom control.\n        const {showState} = this.state;\n        this.chart.zoomControl = new am4maps.ZoomControl();\n        this.chart.zoomControl.cursorOverStyle = am4core.MouseCursorStyle.pointer;\n    \n        // Create a toggle button to show/hide states/provinces.\n        let button = this.chart.chartContainer.createChild(am4core.Button);\n        //button.label.text = \"Show States/Provinces\";\n        button.label.text = `${\n          showState ? \"Hide\" : \"Show\"\n          } States/Provinces`;\n        button.togglable = true;\n        button.padding(5, 5, 5, 5);\n        button.align = \"right\";\n        button.marginRight = 15;\n        button.cursorOverStyle = am4core.MouseCursorStyle.pointer;\n        button.events.on(\"hit\", () => {\n          this.onShowState(button.isActive);\n          const {showState} = this.state;\n          this.stateSeries.forEach(s => (s.disabled = !showState));\n          button.label.text = `${\n            showState ? \"Hide\" : \"Show\"\n            } States/Provinces`;\n        });\n      }\n    \n      createChart() {\n        const { heatmapData } = this.state;\n    \n        this.initChart();\n    \n        const worldSeries = this.createChartSeries({\n          geodata: am4geodata_worldLow,\n          exclude: [\"AQ\"],\n          data: heatmapData\n        });\n    \n        // const chinaSeries = this.createChartSeries({\n        //   geodata: am4geodata_chinaLow,\n        //   data: heatmapData,\n        //   disabled: !this.state.showState\n        // });\n    \n        const usaSeries = this.createChartSeries({\n          geodata: am4geodata_usaLow,\n          data: heatmapData,\n          disabled: !this.state.showState\n        });\n    \n        // const canadaSeries = this.createChartSeries({\n        //   geodata: am4geodata_canadaLow,\n        //   data: heatmapData,\n        //   disabled: !this.state.showState\n        // });\n    \n        // const australiaSeries = this.createChartSeries({\n        //   geodata: am4geodata_australiaLow,\n        //   data: heatmapData,\n        //   disabled: !this.state.showState\n        // });\n    \n        //this.stateSeries = [chinaSeries, usaSeries, canadaSeries, australiaSeries];\n        this.stateSeries = [usaSeries]\n    \n        this.initChartInterface();\n      }\n    \n      resetChart() {\n        const { heatmapData } = this.state;\n    \n        const worldSeries = this.createChartSeries({\n          geodata: am4geodata_worldLow,\n          exclude: [\"AQ\"],\n          data: heatmapData\n        });\n    \n        const usaSeries = this.createChartSeries({\n          geodata: am4geodata_usaLow,\n          data: heatmapData,\n          disabled: !this.state.showState\n        });\n    \n        this.stateSeries = [usaSeries];\n    \n      }\n\n      componentWillUnmount() {\n        if (this.chart) {\n          this.chart.dispose();\n        }\n      }\n\n    render() {\n        return <div id=\"chartdiv\"></div>;\n    }\n}\n\nexport default ScoreMap;","import React, { PureComponent } from \"react\";\nimport ModelAPI from \"../modelapi\";\nimport { areaToStr, strToArea} from \"../covid19util\";\nimport ScoreGraph from \"./scoreGraph\";\nimport ScoreMap from './scoreMap';\nimport \"./scorePage.css\";\n\nimport {\n    Form,\n    Select,\n    Slider,\n    Switch,\n    Alert,\n    Row,\n    Col\n  } from \"antd\";\n\nconst { Option } = Select;\n\nclass ScorePage extends PureComponent{\n    constructor(props){\n        super(props);\n        this.state = {\n            areas: this.props.areas || [],\n            areasList: [],\n            latestDate: \"\",\n            mainGraphData: {},\n            weeks: this.props.weeks || 0, // will later be set to be the weeks to the latest date as initial value\n            latestWeek: 0, //will change later and remain unchange until database updated\n            dynamicMapOn: false,\n            noDataError: false,\n            errorDescription: \"\"\n        }  \n        \n        this.addAreaByStr = this.addAreaByStr.bind(this);\n        this.removeAreaByStr = this.removeAreaByStr.bind(this);\n        this.onValuesChange = this.onValuesChange.bind(this);\n        this.onMapClick = this.onMapClick.bind(this);\n        this.onWeeksChange = this.onWeeksChange.bind(this);\n        this.switchDynamicMap = this.switchDynamicMap.bind(this);\n        this.onAlertClose = this.onAlertClose.bind(this);\n        this.onNoData = this.onNoData.bind(this);\n        this.generateMarks = this.generateMarks.bind(this);\n    }\n\n    componentDidMount = ()=>{\n        this.formRef = React.createRef();\n    \n        this.modelAPI = new ModelAPI();\n\n        this.modelAPI.latest_score_date(latestDate => \n            this.setState({\n                latestDate: latestDate[0].date,\n                weeks: latestDate[0].weeks,\n                latestWeek: latestDate[0].weeks\n            }, ()=>{\n                this.addAreaByStr('US');\n                this.formRef.current.setFieldsValue({\n                    weeks: this.state.latestWeek,\n                });\n                this.map.fetchData(this.state.dynamicMapOn);\n            })\n        );\n    \n        this.modelAPI.areas(allAreas =>\n          this.setState({\n            areasList: allAreas\n          })\n        );\n    }\n\n    onMapClick(area) {\n        if (!this.areaIsSelected(area)) {\n            this.addAreaByStr(areaToStr(area));\n        }\n    }\n\n    areaIsSelected(area) {\n        if (this.state.areas && area) {\n          const newAreaStr = areaToStr(area);\n          return this.state.areas.includes(newAreaStr);\n        }\n        return false;\n    }\n\n    addAreaByStr(areaStr) {\n        const areaObj = strToArea(areaStr);\n    \n        this.setState(\n          prevState => ({\n            areas: [...prevState.areas, areaStr]\n          }),\n          () => {\n            this.modelAPI.scores(\n            {\n                state: areaObj.state,\n                country: areaObj.country,\n                weeks: this.state.weeks,\n            },\n            data => {\n                this.setState(prevState => ({\n                mainGraphData: {\n                    ...prevState.mainGraphData,\n                    [areaStr]: data\n                }\n                }));\n            }\n            );\n\n            this.formRef.current.setFieldsValue({\n              areas: this.state.areas\n            });\n          }\n        );\n    }\n    \n    removeAreaByStr(targetAreaStr) {\n        this.setState(prevState => {\n          return {\n            // Filter out the area / graph data corresponding to the target area\n            // string.\n            areas: prevState.areas.filter(areaStr => areaStr !== targetAreaStr),\n            mainGraphData: Object.keys(prevState.mainGraphData)\n              .filter(areaStr => areaStr !== targetAreaStr)\n              .reduce((newMainGraphData, areaStr) => {\n                return {\n                  ...newMainGraphData,\n                  [areaStr]: prevState.mainGraphData[areaStr]\n                };\n              }, {})\n          };\n        });\n    }\n    \n    onValuesChange(changedValues, allValues) {\n        // If we're here it means the user either added or deleted an area, so we\n        // can do a union / intersection to figure out what to add/remove.\n        const prevAreas = this.state.areas;\n        const newAreas = allValues.areas;\n\n        const areasToAdd = newAreas.filter(\n        areaStr => !prevAreas.includes(areaStr)\n        );\n        const areasToRemove = prevAreas.filter(\n        areaStr => !newAreas.includes(areaStr)\n        );\n\n        areasToAdd.forEach(this.addAreaByStr);\n        areasToRemove.forEach(this.removeAreaByStr);\n    }\n\n    onWeeksChange(weeks) {\n        this.setState({ weeks }, () => {\n          this.reloadAll();\n        });\n    }\n\n    bindRef = ref => { \n        this.map = ref \n    }\n\n    reloadAll() {\n        const prevAreas = this.state.areas;\n        this.setState(\n          {\n            areas: [],\n            mainGraphData: {}\n          },\n          () => {\n            // Add all the areas back.\n            prevAreas.forEach(this.addAreaByStr);\n    \n            // TODO: Add code for stuff after reload here!\n            // Force reload the heatmap, only refetch data when dynamic map is on\n            if (this.state.dynamicMapOn) {\n              this.map.fetchData(this.state.dynamicMapOn);\n            }\n    \n          }\n        );\n    }\n\n    switchDynamicMap(checked) {\n        this.setState({\n          dynamicMapOn: checked\n        });\n        this.map.fetchData(checked);\n    }\n\n    //when closing the alert\n    onAlertClose = ()=>{\n        this.setState({\n        noDataError: false\n        });\n    }\n\n    //when encounter an no data error\n    onNoData = (name) =>{\n        this.setState({\n        noDataError: true,\n        errorDescription: `There is currently no data for ${name}`\n        })\n    }\n\n    generateMarks = ()=>{\n        const {latestDate} = this.state;\n        let lastDate = new Date(`${latestDate}T00:00`);\n        let date = new Date(2020,2,11);\n        //get the date of the selected date on slider\n        let marks = {};\n        let i = 0;\n        while (date <= lastDate)\n        {\n           marks[i] = `${date.getMonth()+1}/${date.getDate()}`;\n           date.setDate(date.getDate(Date) + 7);\n           i++;\n        }\n        return marks;\n      }\n\n    render(){\n        const {\n            areas,\n            areasList,\n            weeks,\n            mainGraphData,\n            dynamicMapOn,\n            latestWeek,\n            noDataError,\n            errorDescription\n          } = this.state;\n        const countryOptions = areasList\n        .filter(area => !this.areaIsSelected(area))\n        .map(areaToStr)\n        .sort()\n        .map(s => {\n        return <Option key={s}> {s} </Option>;\n        });\n\n        const marks = this.generateMarks();\n        return(\n            <div className=\"score-page\">\n                <Row type=\"flex\" justify=\"space-around\">\n                <Col span={10}>\n                    {noDataError?\n                        <Alert\n                        message= {`${errorDescription}`}\n                        description= \"Please wait for our updates.\"\n                        type=\"error\"\n                        closable\n                        onClose={this.onAlertClose}\n                        />: null\n                    }\n                    <div className=\"form-wrapper\">\n                        <Form\n                            ref={this.formRef}\n                            onValuesChange={this.onValuesChange}\n                        >\n                            <Form.Item\n                                label=\"Areas\"\n                                name=\"areas\"\n                                rules={[{ required: true, message: \"Please select areas!\" }]}\n                            >\n                                <Select\n                                mode=\"multiple\"\n                                style={{ width: \"100%\" }}\n                                placeholder=\"Select Areas\"\n                                >\n                                {countryOptions}\n                                </Select>\n                            </Form.Item>\n\n                            <Form.Item\n                                label=\"Week to check\"\n                                name=\"weeks\"\n                                rules={[\n                                { required: true, message: \"Please select the week you want to see\" }\n                                ]}\n                            >\n                                <Slider\n                                    marks={marks}\n                                    initialValue={weeks}\n                                    max={latestWeek}\n                                    onAfterChange={this.onWeeksChange}\n                                />\n                            </Form.Item>\n                        </Form>\n                        <p>\n                        Dynamic Map:&nbsp;&nbsp;  \n                        <Switch \n                            onChange={this.switchDynamicMap} \n                        />\n                        </p>\n                    </div>\n                </Col>\n                <Col span={14}>\n                <div className=\"map-wrapper\">\n                    <ScoreMap className=\"score-map\"\n                    triggerRef={this.bindRef}\n                    dynamicMapOn={dynamicMapOn}\n                    weeks={weeks}\n                    latestWeek={latestWeek}\n                    onMapClick={this.onMapClick} \n                    onNoData = {this.onNoData}\n                    />\n                </div>\n                </Col>\n                </Row>\n                {areas.length?\n                <Row>\n                <Col span={24}>\n                    <div className=\"graph-wrapper\">\n                    <ScoreGraph\n                        data={mainGraphData}\n                    ></ScoreGraph>\n                    </div>\n                </Col>\n                </Row>\n                : null}\n            </div>\n        );\n    }\n}\n\nexport default ScorePage;","import React, { Component } from \"react\";\nimport {\n    Menu,\n    Row,\n    Col\n} from 'antd';\nimport \"./navbar.css\";\n\nclass NavBar extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            activateItem: 'forecast'\n        };\n    }\n\n    handleItemClick = (e) => \n    {\n        const {redirectForecast, redirectAbout, redirectScore, redirectLeaderboard} = this.props;\n        const {key} = e;\n        this.setState({\n            activeItem: e.key\n        });\n        if (key === \"forecast\")\n        {\n            redirectForecast();\n        }\n        else if (key === \"information\")\n        {\n            redirectAbout();\n        }\n        else if (key === \"quarantine-score\")\n        {\n            redirectScore();\n        } else if (key === \"leaderboard\") {\n            redirectLeaderboard();\n        }\n    }\n\n    render() {\n        let url = window.location.href;\n        return (\n            <Row className=\"navbar-container\">\n            <Col >\n                <img\n                    className=\"logo\"\n                    src=\"https://identity.usc.edu/files/2011/12/combo_gold_white_cardinal.png\"\n                    alt=\"USC\"\n                />\n            </Col>\n            <Col>\n                <Menu theme=\"light\"\n                    mode=\"horizontal\"\n                    onClick={this.handleItemClick}\n                    defaultSelectedKeys={\n                        url.includes(\"score\")?['quarantine-score']\n                        :url.includes(\"about\")?['information']\n                        :url.includes(\"leaderboard\")?['leaderboard']\n                        :['forecast']\n                    }>\n                    <Menu.Item key=\"forecast\">COVID-19 Forecast</Menu.Item>\n                    <Menu.Item key=\"quarantine-score\">Reproduction Number</Menu.Item>\n                    <Menu.Item key=\"leaderboard\">Leaderboard</Menu.Item>\n                    <Menu.Item key=\"information\">About Us</Menu.Item>\n                </Menu>\n            </Col>\n        </Row>\n        );\n    }\n}\n\nexport default NavBar;","import React, { Component } from \"react\";\nimport { List, Avatar, Row, Col } from 'antd';\nimport \"../covid19app.css\";\nimport \"./leaderboard.css\";\nimport nyt_graph from \"./img/nyt_graph.png\"\nimport jhu_graph from \"./img/jhu_graph.png\"\nimport usf_graph from \"./img/usf_graph.png\"\nimport all_graph from \"./img/all_graph.png\"\n\nconst data = {\n    jhu: {\n        runningAvgRankings: [\n            {\n                model: {\n                    name: \"SI-kJalpha using the JHU dataset\",\n                    description: \"This is our SI-kJalpha trained on the Johns Hopkins University's Covid19 dataset.\",\n                    link: \"https://scc-usc.github.io/ReCOVER-COVID-19/\"\n                },\n                RMSE: 80.03\n            },\n            {\n                model: {\n                    name: \"YYG - ParamSearch\",\n                    description: \"Based on the SEIR model to make daily projections regarding \\\n                    COVID-19 infections and deaths in 50 US states. \\\n                    The model's contributor is Youyang Gu.\",\n                    link: \"http://covid19-projections.com/about/\"\n                },\n                RMSE: 85.24\n            },\n            {\n                model: {\n                    name: \"Covid19 Simulator\",\n                    description: \"An interactive tool developed by researchers at Mass General Hospital, \\\n                    Harvard Medical School, Georgia Tech and Boston Medical Center.\",\n                    link: \"https://covid19sim.org/\"\n                },\n                RMSE: 88.52\n            },\n        ],\n        recentRankings: [\n            {\n                model: {\n                    name: \"SI-kJalpha using the Johns Hopkins University's Covid19 dataset\",\n                    description: \"This is our SI-kJalpha trained on the Johns Hopkins University's Covid19 dataset.\",\n                    link: \"https://scc-usc.github.io/ReCOVER-COVID-19/\"\n                },\n                RMSE: 59.30\n            },\n            {\n                model: {\n                    name: \"YYG - ParamSearch\",\n                    description: \"Based on the SEIR model to make daily projections regarding \\\n                    COVID-19 infections and deaths in 50 US states. \\\n                    The model's contributor is Youyang Gu.\",\n                    link: \"http://covid19-projections.com/about/\"\n                },\n                RMSE: 61.48\n            },\n            {\n                model: {\n                    name: \"Covid19 Simulator\",\n                    description: \"An interactive tool developed by researchers at Mass General Hospital, \\\n                    Harvard Medical School, Georgia Tech and Boston Medical Center.\",\n                    link: \"https://covid19sim.org/\"\n                },\n                RMSE: 78.83\n            },\n        ]\n    },\n    nyt: {\n        runningAvgRankings: [\n            {\n                model: {\n                    name: \"SI-kJalpha using the NYTimes dataset\",\n                    description: \"This is our SI-kJalpha trained on the New York Times dataset.\",\n                    link: \"https://scc-usc.github.io/ReCOVER-COVID-19/\"\n                },\n                RMSE: 73.68\n            },\n            {\n                model: {\n                    name: \"Iowa State Lily Wang's Research Group - Spatiotemporal Epidemic Modeling\",\n                    description: \"A COVID19 forecast project led by Lily Wang in Iowa State University.\",\n                    link: \"https://covid19.stat.iastate.edu\"\n                },\n                RMSE: 89.76\n            },\n            {\n                model: {\n                    name: \"UCLA - SuEIR\",\n                    description: \"SEIR model by UCLA Statistical Machine Learning Lab.\",\n                    link: \"https://covid19.uclaml.org/\"\n                },\n                RMSE: 90.34\n            },\n            {\n                model: {\n                    name: \"CovidActNow - SEIR_CAN\",\n                    description: \"SEIR model by the CovidActNow research team.\",\n                    link: \"https://covidactnow.org/\"\n                },\n                RMSE: 91.96\n            },\n\n        ],\n        recentRankings: [\n            {\n                model: {\n                    name: \"SI-kJalpha using the NYTimes dataset\",\n                    description: \"This is our SI-kJalpha trained on the New York Times dataset.\",\n                    link: \"https://scc-usc.github.io/ReCOVER-COVID-19/\"\n                },\n                RMSE: 38.29\n            },\n            {\n                model: {\n                    name: \"UCLA - SuEIR\",\n                    description: \"SEIR model by UCLA Statistical Machine Learning Lab.\",\n                    link: \"https://covid19.uclaml.org/\"\n                },\n                RMSE: 53.42\n            },\n            {\n                model: {\n                    name: \"Iowa State Lily Wang's Research Group - Spatiotemporal Epidemic Modeling\",\n                    description: \"A COVID19 forecast project led by Lily Wang in Iowa State University.\",\n                    link: \"https://covid19.stat.iastate.edu\"\n                },\n                RMSE: 64.25\n            },\n            {\n                model: {\n                    name: \"CovidActNow - SEIR_CAN\",\n                    description: \"SEIR model by the CovidActNow research team.\",\n                    link: \"https://covidactnow.org/\"\n                },\n                RMSE: 87.23\n            },\n        ]\n\n    },\n    usafacts: {\n        runningAvgRankings: [\n            {\n                model: {\n                    name: \"SI-kJalpha using the USAFACTS dataset\",\n                    description: \"This is our SI-kJalpha trained on the USAFACTS Covid19 dataset.\",\n                    link: \"https://scc-usc.github.io/ReCOVER-COVID-19/\"\n                },\n                RMSE: 78.75\n            },\n            {\n                model: {\n                    name: \"Columbia University - SELECT\",\n                    description: \"A metapopulation county-level SEIR model by Columbia University.\",\n                    link: \"https://blogs.cuit.columbia.edu/jls106/publications/covid-19-findings-simulations/\"\n                },\n                RMSE: 100.46\n            },\n            {\n                model: {\n                    name: \"JHU - IDD\",\n                    description: \" County-level metapopulation model by Johns Hopkins ID Dynamics COVID-19 Working Group.\",\n                    link: \"https://github.com/HopkinsIDD/COVIDScenarioPipeline\"\n                },\n                RMSE: 140.95\n            },\n        ],\n        recentRankings: [\n            {\n                model: {\n                    name: \"SI-kJalpha using the USAFACTS dataset\",\n                    description: \"This is our SI-kJalpha trained on the USAFACTS Covid19 dataset.\",\n                    link: \"https://scc-usc.github.io/ReCOVER-COVID-19/\"\n                },\n                RMSE: 47.93\n            },\n            {\n                model: {\n                    name: \"Columbia University - SELECT\",\n                    description: \"A metapopulation county-level SEIR model by Columbia University.\",\n                    link: \"https://blogs.cuit.columbia.edu/jls106/publications/covid-19-findings-simulations/\"\n                },\n                RMSE: 84.25\n            },\n            {\n                model: {\n                    name: \"JHU - IDD\",\n                    description: \" County-level metapopulation model by Johns Hopkins ID Dynamics COVID-19 Working Group.\",\n                    link: \"https://github.com/HopkinsIDD/COVIDScenarioPipeline\"\n                },\n                RMSE: 102.45\n            },\n        ]\n    }\n};\n\nclass Leaderboard extends Component {\n    getAvatar(number) {\n        let icon_src = \"\";\n        switch (number) {\n            case 1:\n                icon_src = \"https://img.icons8.com/officel/80/000000/medal2.png\";\n                break;\n            case 2:\n                icon_src = \"https://img.icons8.com/officel/80/000000/medal-second-place.png\";\n                break;\n            case 3:\n                icon_src = \"https://img.icons8.com/officel/80/000000/medal2-third-place.png\";\n                break;\n            default:\n                icon_src = \"https://img.icons8.com/carbon-copy/100/000000/\" + number + \"-circle.png\";\n                break;\n        }\n\n        return <Avatar className=\"rank-number\" src={icon_src} alt=\"\" />;\n\n    };\n\n    render() {\n        return (\n            <div className=\"page-wrapper\">\n                <div className=\"grid\">\n                    <Row>\n                        <Col span={8}>\n                            <h1 className=\"title\">Leaderboard of models on NYTimes dataset</h1>\n                            <h2 className=\"title\">Running Average Performance</h2>\n                            <List className=\"leaderboard\"\n                                itemLayout=\"horizontal\"\n                                dataSource={data.nyt.runningAvgRankings}\n                                renderItem={item => (\n                                    <List.Item>\n                                        <List.Item.Meta\n                                            avatar={this.getAvatar(data.nyt.runningAvgRankings.indexOf(item) + 1)}\n                                            title={<a className=\"model-name\" href={item.model.link}>{item.model.name}</a>}\n                                            description={item.model.description}\n                                        />\n                                        <div className=\"content\">\n                                            <span className=\"score-description\">RMSE: <span className=\"score\">{item.RMSE}</span></span>\n                                        </div>\n                                    </List.Item>\n                                )}\n                            />\n                        </Col>\n                        <Col span={8}>\n                            <h1 className=\"title\">Leaderboard of models on JHU dataset</h1>\n                            <h2 className=\"title\">Running Average Performance</h2>\n                            <List className=\"leaderboard\"\n                                itemLayout=\"horizontal\"\n                                dataSource={data.jhu.runningAvgRankings}\n                                renderItem={item => (\n                                    <List.Item>\n                                        <List.Item.Meta\n                                            avatar={this.getAvatar(data.jhu.runningAvgRankings.indexOf(item) + 1)}\n                                            title={<a className=\"model-name\" href={item.model.link}>{item.model.name}</a>}\n                                            description={item.model.description}\n                                        />\n                                        <div className=\"content\">\n                                            <span>RMSE: <span className=\"score\">{item.RMSE}</span></span>\n                                        </div>\n                                    </List.Item>\n                                )}\n                            />\n                        </Col>\n                        <Col span={8}>\n                        <h1 className=\"title\">Leaderboard of models on USAFACTS dataset</h1>\n                            <h2 className=\"title\">Running Average Performance</h2>\n                            <List className=\"leaderboard\"\n                                itemLayout=\"horizontal\"\n                                dataSource={data.usafacts.runningAvgRankings}\n                                renderItem={item => (\n                                    <List.Item>\n                                        <List.Item.Meta\n                                            avatar={this.getAvatar(data.usafacts.runningAvgRankings.indexOf(item) + 1)}\n                                            title={<a className=\"model-name\" href={item.model.link}>{item.model.name}</a>}\n                                            description={item.model.description}\n                                        />\n                                        <div className=\"content\">\n                                            <span>RMSE: <span className=\"score\">{item.RMSE}</span></span>\n                                        </div>\n                                    </List.Item>\n                                )}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={8}>\n                            <h2 className=\"title\">Recent Performance (from 2020-06-08)</h2>\n                            <List className=\"leaderboard\"\n                                itemLayout=\"horizontal\"\n                                dataSource={data.nyt.recentRankings}\n                                renderItem={item => (\n                                    <List.Item>\n                                        <List.Item.Meta\n                                            avatar={this.getAvatar(data.nyt.recentRankings.indexOf(item) + 1)}\n                                            title={<a className=\"model-name\" href={item.model.link}>{item.model.name}</a>}\n                                            description={item.model.description}\n                                        />\n                                        <div className=\"content\">\n                                            <span>RMSE: <span className=\"score\">{item.RMSE}</span></span>\n                                        </div>\n                                    </List.Item>\n                                )}\n                            />\n                        </Col>\n                        <Col span={8}>\n                            <h2 className=\"title\">Recent Performance (from 2020-06-08)</h2>\n                            <List className=\"leaderboard\"\n                                itemLayout=\"horizontal\"\n                                dataSource={data.jhu.recentRankings}\n                                renderItem={item => (\n                                    <List.Item>\n                                        <List.Item.Meta\n                                            avatar={this.getAvatar(data.jhu.recentRankings.indexOf(item) + 1)}\n                                            title={<a className=\"model-name\" href={item.model.link}>{item.model.name}</a>}\n                                            description={item.model.description}\n                                        />\n                                        <div className=\"content\">\n                                            <span>RMSE: <span className=\"score\">{item.RMSE}</span></span>\n                                        </div>\n                                    </List.Item>\n                                )}\n                            />\n                        </Col>\n                        <Col span={8}>\n                            <h2 className=\"title\">Recent Performance (from 2020-06-08)</h2>\n                            <List className=\"leaderboard\"\n                                itemLayout=\"horizontal\"\n                                dataSource={data.usafacts.recentRankings}\n                                renderItem={item => (\n                                    <List.Item>\n                                        <List.Item.Meta\n                                            avatar={this.getAvatar(data.usafacts.recentRankings.indexOf(item) + 1)}\n                                            title={<a className=\"model-name\" href={item.model.link}>{item.model.name}</a>}\n                                            description={item.model.description}\n                                        />\n                                        <div className=\"content\">\n                                            <span>RMSE: <span className=\"score\">{item.RMSE}</span></span>\n                                        </div>\n                                    </List.Item>\n                                )}\n                            />\n                        </Col>\n                    </Row> \n                    <Row>\n                        <Col span={8}>\n                            <img className=\"graph\" src={nyt_graph}  />\n                        </Col>\n                        <Col span={8}>\n                            <img className=\"graph\" src={jhu_graph}  />\n                        </Col>\n                        <Col span={8}>\n                        <img className=\"graph\" src={usf_graph}  />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <div className=\"main-graph-container\">\n                            <img className=\"graph\" src={all_graph} />\n                        </div>\n                        \n                    </Row>\n\n\t\t            <p className=\"clarification\">\n                        <b>Evaluation method:</b> Since there are some discrepancies among different data sources (JHU, NY Times, and USA Facts), \n                        we performed a separate evaluation for each dataset. <br />\n                        We trained our model using each of the three datasets and use the forecasts \n                        in the respective evaluations. \n                        The chosen evaluation metric is Root Mean Squared Error (RMSE) of daily new deaths computed <br />\n                        over the next two weeks from the day of the forecasts. More precisely, we skip the first day of the forecast to account for errors, \n                        possibly, due to changing timezone or delayed reporting.  <br />\n                        Please contact us at <a className=\"article-anchor\" href=\"mailto:ajiteshs@usc.edu\">ajiteshs@usc.edu</a> \n                        to add your model to the leaderboard.\n                    </p>\n                    <p className=\"disclaimer\">\n                        <b>Disclaimer:</b> The above Covid-19 forecast reports may have copyright restrictions. \n                        You may visit the website of their original work by clicking on their model names. <br />\n                        All credits for predictions go to the respective owners of the forecast reports.\n                        The ReCover-Covid-19 website does not hold responsibility or liability for prediction accuracy\n                        of prediction reports that are not generated by USC Data Science lab.\n                    </p> \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Leaderboard;","import React, { Component } from \"react\";\nimport Covid19Predict from \"./covid19predict\";\nimport AboutUS from \"./aboutus\";\nimport ScorePage from './scorePage/scorePage';\nimport {HashRouter, Route, Redirect, Switch} from 'react-router-dom'; \nimport Navbar from \"./navbar/navbar\";\nimport 'semantic-ui-css/semantic.min.css';\nimport \"./covid19app.css\";\nimport Leaderboard from \"./leaderboard/leaderboard\";\n\nclass Covid19App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      redirectForecast: false,\n      redirectAbout: false,\n      redirectScore: false,\n      redirectLeaderboard: false\n    }\n  }\n\n  redirectForecast = ()=>{\n    this.setState({\n      redirectForecast:true,\n      redirectAbout: false,\n      redirectScore: false,\n      redirectLeaderboard: false\n    });\n  }\n\n  redirectAbout = ()=>{\n    this.setState({\n      redirectForecast: false,\n      redirectAbout:true,\n      redirectScore: false,\n      redirectLeaderboard: false\n    });\n  }\n\n  redirectScore = ()=>{\n    this.setState({\n      redirectForecast: false,\n      redirectAbout:false,\n      redirectScore: true,\n      redirectLeaderboard: false\n    });\n  }\n\n  redirectLeaderboard = ()=>{\n    this.setState({\n      redirectForecast: false,\n      redirectAbout: false,\n      redirectScore: false,\n      redirectLeaderboard: true\n    });\n  }\n\n  render() {\n    const {redirectForecast, redirectAbout, redirectScore, redirectLeaderboard} = this.state;\n    let url = window.location.href;\n    return (\n      <HashRouter basename=\"/\">\n        {redirectForecast?<Redirect to=\"/\"/>:null}\n        {redirectScore?<Redirect to=\"/score\"/>:null}\n        {redirectAbout?<Redirect to=\"/about\"/>:null}\n        {redirectLeaderboard?<Redirect to=\"/leaderboard\"/>:null}\n        <Navbar redirectForecast = {this.redirectForecast}\n                redirectScore = {this.redirectScore}\n                redirectAbout = {this.redirectAbout}\n                redirectLeaderboard = {this.redirectLeaderboard}\n        />\n        <Switch>\n          <Route exact path='/' \n            render={(props) => <Covid19Predict {...props} />}/>\n          <Route exact path='/score' \n            render={(props) => <ScorePage {...props}/>}\n          />\n          <Route exact path='/about'\n            render={(props) => <AboutUS {...props} />} />\n          <Route exact path='/leaderboard' \n            render={(props) => <Leaderboard {...props} />}/>\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default Covid19App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Covid19App from \"./covid19app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Covid19App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}