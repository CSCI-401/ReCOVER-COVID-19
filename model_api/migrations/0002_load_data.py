# Generated by Django 3.0.4 on 2020-03-19 21:06

from django.db import migrations
import csv
import datetime

COVID_19_CSV_PATH = "../data/sources/time_series_covid19_confirmed_global.csv"


def load_covid19_data(apps, schema_editor):
    Area = apps.get_model('model_api', 'Area')
    Covid19DataPoint = apps.get_model('model_api', 'Covid19DataPoint')

    with open(COVID_19_CSV_PATH) as f:
        reader = csv.reader(f)
        header = next(reader, None)

        # A 2-level dictionary where the 1st key is country name and 2nd key
        # is raw date, and final value is the total number of infections for
        # that country at that specific date.
        country_level_infections = {}

        for row in reader:
            state = row[0]
            country = row[1]
            lat = float(row[2])
            long = float(row[3])

            if country not in country_level_infections:
                country_level_infections[country] = {}

            # Write new infection area to database.
            area = Area(state=state, country=country, lat=lat, long=long)
            area.save()

            for i in range(4, len(header)):
                raw_date = header[i]
                date = datetime.datetime.strptime(raw_date, "%m/%d/%y").strftime("%Y-%m-%d")
                val = int(row[i])

                if raw_date not in country_level_infections[country]:
                    country_level_infections[country][raw_date] = 0
                country_level_infections[country][raw_date] += val

                # Write new infection data to database.
                covid19_data_point = Covid19DataPoint(area=area, date=date, val=val)
                covid19_data_point.save()

    for country, infections in country_level_infections.items():
        if Area.objects.filter(state="", country=country).exists():
            continue

        country_area = Area(state="", country=country, lat=0, long=0)
        country_area.save()

        print("Extrapolated country-level data for", country)

        for raw_date, val in infections.items():
            date = datetime.datetime.strptime(raw_date, "%m/%d/%y").strftime(
                "%Y-%m-%d")

            country_data_point = Covid19DataPoint(
                area=country_area,
                date=date,
                val=val)
            country_data_point.save()


def delete_covid19_data(apps, schema_editor):
    Area = apps.get_model('model_api', 'Area')
    Covid19DataPoint = apps.get_model('model_api', 'Covid19DataPoint')

    # Clear any previously-existing data.
    Area.objects.all().delete()
    Covid19DataPoint.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('model_api', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_covid19_data, delete_covid19_data),
    ]
