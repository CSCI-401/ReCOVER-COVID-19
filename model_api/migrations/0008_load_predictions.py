# Generated by Django 3.0.4 on 2020-04-12 23:09

from django.db import migrations
import csv
import datetime
import _thread


# class PredictionFile:
#     def __init__(self, path, model, social_distancing):
#         self.path = path
#         self.model = model
#         self.social_distancing = social_distancing
#
#
# PREDICTIONS = [
#     PredictionFile(
#         path="../results/forecasts/global_forecasts_quarantine_avg.csv",
#         model="SI-kJalpha",
#         social_distancing=True
#     ),
#     PredictionFile(
#         path="../results/forecasts/global_forecasts_released_avg.csv",
#         model="SI-kJalpha",
#         social_distancing=False
#     ),
#     PredictionFile(
#         path="../results/forecasts/us_forecasts_quarantine_avg.csv",
#         model="SI-kJalpha",
#         social_distancing=True
#     ),
#     PredictionFile(
#         path="../results/forecasts/us_forecasts_released_avg.csv",
#         model="SI-kJalpha",
#         social_distancing=False
#     ),
#     PredictionFile(
#         path="../results/forecasts/global_forecasts_quarantine_avg_2.csv",
#
#     ),
#     PredictionFile(
#       path="../results/forecasts/global_forecasts_quarantine_avg_5.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/global_forecasts_quarantine_avg_10.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/global_forecasts_quarantine_avg_20.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/global_forecasts_quarantine_avg_40.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/global_forecasts_released_avg_2.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/global_forecasts_released_avg_5.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/global_forecasts_released_avg_10.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/global_forecasts_released_avg_20.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/global_forecasts_released_avg_40.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/us_forecasts_quarantine_avg_2.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/us_forecasts_quarantine_avg_5.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/us_forecasts_quarantine_avg_10.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/us_forecasts_quarantine_avg_20.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/us_forecasts_quarantine_avg_40.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/us_forecasts_released_avg_2.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/us_forecasts_released_avg_5.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/us_forecasts_released_avg_10.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/us_forecasts_released_avg_20.csv",
#     ),
#     PredictionFile(
#       path="../results/forecasts/us_forecasts_released_avg_40.csv",
#     ),
# ]

def load_covid19_prediction(apps, schema_editor):
    Area = apps.get_model('model_api', 'Area')
    Covid19PredictionDataPoint = apps.get_model(
        'model_api', 'Covid19PredictionDataPoint')

    for path in PATHS:
        print("\nLoading prediction from the path ", path)
        model = ''
        if 'quarantine' in path:
            model = 'QUARANTINE'
        elif 'released' in path:
            model = "RELEASED"
        else:
            msg = 'Unknown prediction filename. Skip prediction files.'
            print(msg)
            continue

        underreported_ratio = 0
        if '_avg_2.csv' in path:
            underreported_ratio = 2
        elif '_avg_5.csv' in path:
            underreported_ratio = 5
        elif '_avg_10.csv' in path:
            underreported_ratio = 10
        elif '_avg_20.csv' in path:
            underreported_ratio = 20
        elif '_avg_40.csv' in path:
            underreported_ratio = 40

        with open(path, 'r') as f:
            reader = csv.reader(f)
            header = next(reader, None)

            for row in reader:
                area = None
                if 'global' in path:
                    country = row[1]
                    state = ''
                elif 'us' in path:
                    country = 'US'
                    state = row[1]
                else:
                    msg = 'Unknown prediction filename. Stop loading prediction data.'
                    print(msg)
                    break

                # Find the area in the model_api_area
                try:
                    area = Area.objects.get(country=country, state=state)
                except Area.DoesNotExist:
                    msg = "Could not find the area for country '{0}'".format(country)
                    if state:
                        msg += " and state '{0}'".format(state)
                    area = Area(state=state, country=country)
                    area.save()
                    msg += ' in model_api_area. New area created.'
                    print(msg)

                except Area.MultipleObjectsReturned:
                    msg = "Found multiple areas for country '{0}'".format(country)
                    if state:
                        msg += " and state '{0}'".format(state)
                    msg += ' in model_api_area. Skip this area.'
                    print(msg)
                    continue

                for i in range(2, len(header)):
                    date = header[i]
                    val = int(float(row[i])) if (row[i] != 'NaN') \
                            and (row[i] != '-Inf') \
                            and (row[i] != 'Inf') \
                        else -1

                    # Skip negative values.
                    if val < 0:
                        continue

                    covid19_prediction_data_point = Covid19PredictionDataPoint(
                        area=area,
                        date=date,
                        val=val,
                        model=model,
                        underreported_ratio=underreported_ratio
                    )
                    covid19_prediction_data_point.save()


def delete_covid19_prediction(apps, schema_editor):
    Covid19PredictionDataPoint = apps.get_model(
        'model_api', 'Covid19PredictionDataPoint')

    # Clear all prediction data points.
    Covid19PredictionDataPoint.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('model_api', '0007_covid19model_covid19predictiondatapoint'),
    ]

    operations = [
        migrations.RunPython(load_covid19_prediction,
                             delete_covid19_prediction)
    ]