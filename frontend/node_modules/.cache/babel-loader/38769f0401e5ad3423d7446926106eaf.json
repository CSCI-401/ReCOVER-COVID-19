{"ast":null,"code":"import _classCallCheck from\"/Users/tianjianxu/Documents/GitHub/ReCOVER-COVID-19/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/tianjianxu/Documents/GitHub/ReCOVER-COVID-19/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/tianjianxu/Documents/GitHub/ReCOVER-COVID-19/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/tianjianxu/Documents/GitHub/ReCOVER-COVID-19/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import{Circle,Map,Marker,Popup,TileLayer}from\"react-leaflet\";import ModelAPI from\"./modelapi\";import{areaToStr,strToArea}from\"./covid19util\";import*as am4core from\"@amcharts/amcharts4/core\";import*as am4maps from\"@amcharts/amcharts4/maps\";import am4geodata_worldLow from\"@amcharts/amcharts4-geodata/worldLow\";import am4geodata_usaLow from\"@amcharts/amcharts4-geodata/usaLow\";import am4geodata_chinaLow from\"@amcharts/amcharts4-geodata/chinaLow\";import am4geodata_canadaLow from\"@amcharts/amcharts4-geodata/canadaLow\";import am4geodata_australiaLow from\"@amcharts/amcharts4-geodata/australiaLow\";import am4themes_animated from\"@amcharts/amcharts4/themes/animated\";var HEAT_MAP_MIN_COLOR=\"#fcbba0\";var HEAT_MAP_MAX_COLOR=\"#66000d\";var MAP_HOVER_COLOR=\"#e43027\";am4core.useTheme(am4themes_animated);var Covid19Map=/*#__PURE__*/function(_Component){_inherits(Covid19Map,_Component);var _super=_createSuper(Covid19Map);function Covid19Map(){var _this;_classCallCheck(this,Covid19Map);_this=_super.call(this);_this.modelAPI=new ModelAPI();_this.modelAPI.areas(function(allAreas){return _this.setState({areasList:allAreas});});return _this;}_createClass(Covid19Map,[{key:\"componentDidMount\",value:function componentDidMount(){this.props.triggerRef(this);this.fetchData(this.props.dynamicMapOn);}},{key:\"fetchData\",value:function fetchData(dynamicMapOn){var _this2=this;if(!dynamicMapOn||this.props.model===\"\"){this.modelAPI.cumulative_infections(function(cumulativeInfections){var heatmapData=cumulativeInfections.map(function(d){return{id:d.area.iso_2,// Adjust all heatmap values by log scale.\nvalue:d.value>0?Math.log(d.value):0,// Store the true value so we can display tooltips correctly.\nvalueTrue:d.value,area:d.area};});_this2.setState({heatmapData:heatmapData},_this2.createChart);});}else{this.modelAPI.predict_all({days:this.props.days,model:this.props.model},function(cumulativeInfections){var heatmapData=cumulativeInfections.map(function(d){return{id:d.area.iso_2,// Adjust all heatmap values by log scale.\nvalue:d.value>0?Math.log(d.value):0,// Store the true value so we can display tooltips correctly.\nvalueTrue:d.value,area:d.area};});_this2.setState({heatmapData:heatmapData},_this2.resetChart);});}}},{key:\"initChart\",value:function initChart(){// Create map instance\nthis.chart=am4core.create(\"chartdiv\",am4maps.MapChart);// Set projection\nthis.chart.projection=new am4maps.projections.Mercator();}},{key:\"createChartSeries\",value:function createChartSeries(seriesProps){// Create new map polygon series and copy over all given props.\nvar series=this.chart.series.push(new am4maps.MapPolygonSeries());series=Object.assign(series,seriesProps);var polygonTemplate=series.mapPolygons.template;// Heatmap fill.\nseries.heatRules.push({property:\"fill\",target:polygonTemplate,min:am4core.color(HEAT_MAP_MIN_COLOR),max:am4core.color(HEAT_MAP_MAX_COLOR),maxValue:Math.log(5000000)});// Configure series tooltip. Display the true value of infections.\npolygonTemplate.tooltipText=\"{name}: {valueTrue}\";polygonTemplate.nonScalingStroke=true;polygonTemplate.strokeWidth=0.5;// Create hover state and set alternative fill color.\nvar hs=polygonTemplate.states.create(\"hover\");hs.properties.fill=am4core.color(MAP_HOVER_COLOR);// Change mouse cursor to pointer.\npolygonTemplate.cursorOverStyle=am4core.MouseCursorStyle.pointer;// Create click handler. Apparently ALL the series in the chart must have\n// click handlers activated, so if this function is not running double-check\n// that other series also have click handlers.\nvar onMapClick=this.props.onMapClick;polygonTemplate.events.on(\"hit\",function(e){var _e$target$dataItem$da=e.target.dataItem.dataContext,id=_e$target$dataItem$da.id,value=_e$target$dataItem$da.value,area=_e$target$dataItem$da.area;onMapClick(area);});return series;}},{key:\"initChartInterface\",value:function initChartInterface(){var _this3=this;// Create a zoom control.\nthis.chart.zoomControl=new am4maps.ZoomControl();this.chart.zoomControl.cursorOverStyle=am4core.MouseCursorStyle.pointer;// Create a toggle button to show/hide states/provinces.\nvar button=this.chart.chartContainer.createChild(am4core.Button);button.label.text=\"Show States/Provinces\";button.togglable=true;button.padding(5,5,5,5);button.align=\"right\";button.marginRight=15;button.cursorOverStyle=am4core.MouseCursorStyle.pointer;button.events.on(\"hit\",function(){_this3.stateSeries.forEach(function(s){return s.disabled=!button.isActive;});button.label.text=\"\".concat(button.isActive?\"Hide\":\"Show\",\" States/Provinces\");});}},{key:\"createChart\",value:function createChart(){var heatmapData=this.state.heatmapData;this.initChart();var worldSeries=this.createChartSeries({geodata:am4geodata_worldLow,exclude:[\"AQ\"],data:heatmapData});var chinaSeries=this.createChartSeries({geodata:am4geodata_chinaLow,data:heatmapData,disabled:true});var usaSeries=this.createChartSeries({geodata:am4geodata_usaLow,data:heatmapData,disabled:true});var canadaSeries=this.createChartSeries({geodata:am4geodata_canadaLow,data:heatmapData,disabled:true});var australiaSeries=this.createChartSeries({geodata:am4geodata_australiaLow,data:heatmapData,disabled:true});this.stateSeries=[chinaSeries,usaSeries,canadaSeries,australiaSeries];this.initChartInterface();// worldSeries.data = [\n// {\n//   id: \"US\",\n//   disabled: true\n// },\n// {\n//   id: \"China\",\n//   disabled: true\n// }\n// ];\n// Set up heat legend\n// let heatLegend = this.chart.createChild(am4maps.HeatLegend);\n// heatLegend.series = worldSeries;\n// heatLegend.align = \"right\";\n// heatLegend.valign = \"bottom\";\n// heatLegend.width = am4core.percent(20);\n// heatLegend.marginRight = am4core.percent(4);\n// heatLegend.minValue = 0;\n// heatLegend.maxValue = Math.max(...heatmapData.map(d => d.valueTrue));\n//\n// // Set up custom heat map legend labels using axis ranges\n// let minRange = heatLegend.valueAxis.axisRanges.create();\n// minRange.value = heatLegend.minValue;\n// minRange.label.text = heatLegend.minValue;\n// let maxRange = heatLegend.valueAxis.axisRanges.create();\n// maxRange.value = heatLegend.maxValue;\n// maxRange.label.text = heatLegend.maxValue;\n//\n// // Blank out internal heat legend value axis labels\n// heatLegend.valueAxis.renderer.labels.template.adapter.add(\"text\", function(\n//   labelText\n// ) {\n//   return \"\";\n// });\n}},{key:\"resetChart\",value:function resetChart(){var heatmapData=this.state.heatmapData;var worldSeries=this.createChartSeries({geodata:am4geodata_worldLow,exclude:[\"AQ\"],data:heatmapData});var usaSeries=this.createChartSeries({geodata:am4geodata_usaLow,data:heatmapData,disabled:true});this.stateSeries=[usaSeries];}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){if(this.chart){this.chart.dispose();}}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{id:\"chartdiv\"});}}]);return Covid19Map;}(Component);export default Covid19Map;","map":{"version":3,"sources":["/Users/tianjianxu/Documents/GitHub/ReCOVER-COVID-19/frontend/src/covid19map.js"],"names":["React","Component","Circle","Map","Marker","Popup","TileLayer","ModelAPI","areaToStr","strToArea","am4core","am4maps","am4geodata_worldLow","am4geodata_usaLow","am4geodata_chinaLow","am4geodata_canadaLow","am4geodata_australiaLow","am4themes_animated","HEAT_MAP_MIN_COLOR","HEAT_MAP_MAX_COLOR","MAP_HOVER_COLOR","useTheme","Covid19Map","modelAPI","areas","allAreas","setState","areasList","props","triggerRef","fetchData","dynamicMapOn","model","cumulative_infections","cumulativeInfections","heatmapData","map","d","id","area","iso_2","value","Math","log","valueTrue","createChart","predict_all","days","resetChart","chart","create","MapChart","projection","projections","Mercator","seriesProps","series","push","MapPolygonSeries","Object","assign","polygonTemplate","mapPolygons","template","heatRules","property","target","min","color","max","maxValue","tooltipText","nonScalingStroke","strokeWidth","hs","states","properties","fill","cursorOverStyle","MouseCursorStyle","pointer","onMapClick","events","on","e","dataItem","dataContext","zoomControl","ZoomControl","button","chartContainer","createChild","Button","label","text","togglable","padding","align","marginRight","stateSeries","forEach","s","disabled","isActive","state","initChart","worldSeries","createChartSeries","geodata","exclude","data","chinaSeries","usaSeries","canadaSeries","australiaSeries","initChartInterface","dispose"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Circle, Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport ModelAPI from \"./modelapi\";\nimport { areaToStr, strToArea } from \"./covid19util\";\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\nimport am4geodata_chinaLow from \"@amcharts/amcharts4-geodata/chinaLow\";\nimport am4geodata_canadaLow from \"@amcharts/amcharts4-geodata/canadaLow\";\nimport am4geodata_australiaLow from \"@amcharts/amcharts4-geodata/australiaLow\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nconst HEAT_MAP_MIN_COLOR = \"#fcbba0\";\nconst HEAT_MAP_MAX_COLOR = \"#66000d\";\nconst MAP_HOVER_COLOR = \"#e43027\";\n\nam4core.useTheme(am4themes_animated);\n\nclass Covid19Map extends Component {\n  constructor() {\n    super();\n    this.modelAPI = new ModelAPI();\n\n    this.modelAPI.areas(allAreas =>\n      this.setState({\n        areasList: allAreas\n      })\n    );\n  }\n\n  componentDidMount() {\n    this.props.triggerRef(this);\n    this.fetchData(this.props.dynamicMapOn);\n  }\n\n  fetchData(dynamicMapOn) {\n    if (!dynamicMapOn || this.props.model === \"\") {\n      this.modelAPI.cumulative_infections(cumulativeInfections => {\n        let heatmapData = cumulativeInfections.map(d => {\n          return {\n            id: d.area.iso_2,\n            // Adjust all heatmap values by log scale.\n            value: d.value > 0 ? Math.log(d.value) : 0,\n            // Store the true value so we can display tooltips correctly.\n            valueTrue: d.value,\n            area: d.area\n          };\n        });\n        this.setState({ heatmapData }, this.createChart);\n      });\n    } else {\n      this.modelAPI.predict_all({\n        days: this.props.days,\n        model: this.props.model\n      }, cumulativeInfections => {\n        let heatmapData = cumulativeInfections.map(d => {\n          return {\n            id: d.area.iso_2,\n            // Adjust all heatmap values by log scale.\n            value: d.value > 0 ? Math.log(d.value) : 0,\n            // Store the true value so we can display tooltips correctly.\n            valueTrue: d.value,\n            area: d.area\n          };\n        });\n        this.setState({ heatmapData }, this.resetChart);\n      });\n      \n    }\n  }\n\n  initChart() {\n    // Create map instance\n    this.chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n    // Set projection\n    this.chart.projection = new am4maps.projections.Mercator();\n  }\n\n  createChartSeries(seriesProps) {\n    // Create new map polygon series and copy over all given props.\n    let series = this.chart.series.push(new am4maps.MapPolygonSeries());\n    series = Object.assign(series, seriesProps);\n\n    let polygonTemplate = series.mapPolygons.template;\n\n    // Heatmap fill.\n    series.heatRules.push({\n      property: \"fill\",\n      target: polygonTemplate,\n      min: am4core.color(HEAT_MAP_MIN_COLOR),\n      max: am4core.color(HEAT_MAP_MAX_COLOR),\n      maxValue: Math.log(5000000)\n    });\n\n    // Configure series tooltip. Display the true value of infections.\n    polygonTemplate.tooltipText = \"{name}: {valueTrue}\";\n    polygonTemplate.nonScalingStroke = true;\n    polygonTemplate.strokeWidth = 0.5;\n\n    // Create hover state and set alternative fill color.\n    let hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = am4core.color(MAP_HOVER_COLOR);\n\n    // Change mouse cursor to pointer.\n    polygonTemplate.cursorOverStyle = am4core.MouseCursorStyle.pointer;\n\n    // Create click handler. Apparently ALL the series in the chart must have\n    // click handlers activated, so if this function is not running double-check\n    // that other series also have click handlers.\n    const { onMapClick } = this.props;\n    polygonTemplate.events.on(\"hit\", e => {\n      const { id, value, area } = e.target.dataItem.dataContext;\n      onMapClick(area);\n    });\n\n    return series;\n  }\n\n  initChartInterface() {\n    // Create a zoom control.\n    this.chart.zoomControl = new am4maps.ZoomControl();\n    this.chart.zoomControl.cursorOverStyle = am4core.MouseCursorStyle.pointer;\n\n    // Create a toggle button to show/hide states/provinces.\n    let button = this.chart.chartContainer.createChild(am4core.Button);\n    button.label.text = \"Show States/Provinces\";\n    button.togglable = true;\n    button.padding(5, 5, 5, 5);\n    button.align = \"right\";\n    button.marginRight = 15;\n    button.cursorOverStyle = am4core.MouseCursorStyle.pointer;\n    button.events.on(\"hit\", () => {\n      this.stateSeries.forEach(s => (s.disabled = !button.isActive));\n      button.label.text = `${\n        button.isActive ? \"Hide\" : \"Show\"\n        } States/Provinces`;\n    });\n  }\n\n  createChart() {\n    const { heatmapData } = this.state;\n\n    this.initChart();\n\n    const worldSeries = this.createChartSeries({\n      geodata: am4geodata_worldLow,\n      exclude: [\"AQ\"],\n      data: heatmapData\n    });\n\n    const chinaSeries = this.createChartSeries({\n      geodata: am4geodata_chinaLow,\n      data: heatmapData,\n      disabled: true\n    });\n\n    const usaSeries = this.createChartSeries({\n      geodata: am4geodata_usaLow,\n      data: heatmapData,\n      disabled: true\n    });\n\n    const canadaSeries = this.createChartSeries({\n      geodata: am4geodata_canadaLow,\n      data: heatmapData,\n      disabled: true\n    });\n\n    const australiaSeries = this.createChartSeries({\n      geodata: am4geodata_australiaLow,\n      data: heatmapData,\n      disabled: true\n    });\n\n    this.stateSeries = [chinaSeries, usaSeries, canadaSeries, australiaSeries];\n\n    this.initChartInterface();\n\n    // worldSeries.data = [\n    // {\n    //   id: \"US\",\n    //   disabled: true\n    // },\n    // {\n    //   id: \"China\",\n    //   disabled: true\n    // }\n    // ];\n\n    // Set up heat legend\n    // let heatLegend = this.chart.createChild(am4maps.HeatLegend);\n    // heatLegend.series = worldSeries;\n    // heatLegend.align = \"right\";\n    // heatLegend.valign = \"bottom\";\n    // heatLegend.width = am4core.percent(20);\n    // heatLegend.marginRight = am4core.percent(4);\n    // heatLegend.minValue = 0;\n    // heatLegend.maxValue = Math.max(...heatmapData.map(d => d.valueTrue));\n    //\n    // // Set up custom heat map legend labels using axis ranges\n    // let minRange = heatLegend.valueAxis.axisRanges.create();\n    // minRange.value = heatLegend.minValue;\n    // minRange.label.text = heatLegend.minValue;\n    // let maxRange = heatLegend.valueAxis.axisRanges.create();\n    // maxRange.value = heatLegend.maxValue;\n    // maxRange.label.text = heatLegend.maxValue;\n    //\n    // // Blank out internal heat legend value axis labels\n    // heatLegend.valueAxis.renderer.labels.template.adapter.add(\"text\", function(\n    //   labelText\n    // ) {\n    //   return \"\";\n    // });\n  }\n\n  resetChart() {\n    const { heatmapData } = this.state;\n\n    const worldSeries = this.createChartSeries({\n      geodata: am4geodata_worldLow,\n      exclude: [\"AQ\"],\n      data: heatmapData\n    });\n\n    const usaSeries = this.createChartSeries({\n      geodata: am4geodata_usaLow,\n      data: heatmapData,\n      disabled: true\n    });\n\n    this.stateSeries = [usaSeries];\n\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    \n    return <div id=\"chartdiv\"></div>;\n  }\n}\n\nexport default Covid19Map;\n"]},"metadata":{},"sourceType":"module"}