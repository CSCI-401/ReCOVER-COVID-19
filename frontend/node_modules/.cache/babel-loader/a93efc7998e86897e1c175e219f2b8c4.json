{"ast":null,"code":"import _classCallCheck from\"/Users/tianjianxu/Documents/GitHub/ReCOVER-COVID-19/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/tianjianxu/Documents/GitHub/ReCOVER-COVID-19/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import axios from\"axios\";// TODO: Update with actual backend URL once backend is up and running.\nvar API_BASE_URL=process.env.REACT_APP_BACKEND_BASE_URL;var ModelAPI=/*#__PURE__*/function(){function ModelAPI(){_classCallCheck(this,ModelAPI);}_createClass(ModelAPI,[{key:\"affected_by\",value:function affected_by(callback){}},{key:\"areas\",value:function areas(callback){var endpoint=\"\".concat(API_BASE_URL,\"/areas\");axios.get(endpoint).then(function(res){var allAreas=res.data;console.log(allAreas);callback(allAreas);});}},{key:\"models\",value:function models(callback){var endpoint=\"\".concat(API_BASE_URL,\"/models\");axios.get(endpoint).then(function(res){var allModels=res.data;console.log(allModels);callback(allModels);});}},{key:\"cumulative_infections\",value:function cumulative_infections(callback){var endpoint=\"\".concat(API_BASE_URL,\"/cumulative_infections\");axios.get(endpoint).then(function(res){return callback(res.data);});}/**\n   * Params should have 'days', 'model'\n   */},{key:\"predict_all\",value:function predict_all(params,callback){var endpoint=\"\".concat(API_BASE_URL,\"/predict_all\");axios.get(endpoint,{params:params}).then(function(res){return callback(res.data);});}/**\n   * Params should have 'country', 'state', 'weeks', 'distancing.'\n   */},{key:\"predict\",value:function predict(params,callback){var endpoint=\"\".concat(API_BASE_URL,\"/predict\");console.log(params);axios.get(endpoint,{params:params}).then(function(res){callback(res.data);});}}]);return ModelAPI;}();export default ModelAPI;","map":{"version":3,"sources":["/Users/tianjianxu/Documents/GitHub/ReCOVER-COVID-19/frontend/src/modelapi.js"],"names":["axios","API_BASE_URL","process","env","REACT_APP_BACKEND_BASE_URL","ModelAPI","callback","endpoint","get","then","res","allAreas","data","console","log","allModels","params"],"mappings":"oWAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA;AACA,GAAMC,CAAAA,YAAY,CAAGC,OAAO,CAACC,GAAR,CAAYC,0BAAjC,C,GAEMC,CAAAA,Q,kJACQC,Q,CAAU,CAAE,C,oCAElBA,Q,CAAU,CACd,GAAMC,CAAAA,QAAQ,WAAMN,YAAN,UAAd,CACAD,KAAK,CAACQ,GAAN,CAAUD,QAAV,EAAoBE,IAApB,CAAyB,SAAAC,GAAG,CAAI,CAC9B,GAAMC,CAAAA,QAAQ,CAAGD,GAAG,CAACE,IAArB,CACAC,OAAO,CAACC,GAAR,CAAYH,QAAZ,EACAL,QAAQ,CAACK,QAAD,CAAR,CACD,CAJD,EAKD,C,sCAEML,Q,CAAU,CACf,GAAMC,CAAAA,QAAQ,WAAMN,YAAN,WAAd,CACAD,KAAK,CAACQ,GAAN,CAAUD,QAAV,EAAoBE,IAApB,CAAyB,SAAAC,GAAG,CAAI,CAC9B,GAAMK,CAAAA,SAAS,CAAGL,GAAG,CAACE,IAAtB,CACAC,OAAO,CAACC,GAAR,CAAYC,SAAZ,EACAT,QAAQ,CAACS,SAAD,CAAR,CACD,CAJD,EAKD,C,oEAEqBT,Q,CAAU,CAC9B,GAAMC,CAAAA,QAAQ,WAAMN,YAAN,0BAAd,CACAD,KAAK,CAACQ,GAAN,CAAUD,QAAV,EAAoBE,IAApB,CAAyB,SAAAC,GAAG,QAAIJ,CAAAA,QAAQ,CAACI,GAAG,CAACE,IAAL,CAAZ,EAA5B,EACD,CAED;;qDAGYI,M,CAAQV,Q,CAAU,CAC5B,GAAMC,CAAAA,QAAQ,WAAMN,YAAN,gBAAd,CACAD,KAAK,CAACQ,GAAN,CAAUD,QAAV,CAAoB,CAClBS,MAAM,CAAEA,MADU,CAApB,EAEGP,IAFH,CAEQ,SAAAC,GAAG,QAAIJ,CAAAA,QAAQ,CAACI,GAAG,CAACE,IAAL,CAAZ,EAFX,EAGD,CAED;;6CAGQI,M,CAAQV,Q,CAAU,CACxB,GAAMC,CAAAA,QAAQ,WAAMN,YAAN,YAAd,CACAY,OAAO,CAACC,GAAR,CAAYE,MAAZ,EACAhB,KAAK,CACFQ,GADH,CACOD,QADP,CACiB,CACbS,MAAM,CAAEA,MADK,CADjB,EAIGP,IAJH,CAIQ,SAAAC,GAAG,CAAI,CACXJ,QAAQ,CAACI,GAAG,CAACE,IAAL,CAAR,CACD,CANH,EAOD,C,wBAGH,cAAeP,CAAAA,QAAf","sourcesContent":["import axios from \"axios\";\n\n// TODO: Update with actual backend URL once backend is up and running.\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_BASE_URL;\n\nclass ModelAPI {\n  affected_by(callback) {}\n\n  areas(callback) {\n    const endpoint = `${API_BASE_URL}/areas`;\n    axios.get(endpoint).then(res => {\n      const allAreas = res.data;\n      console.log(allAreas);\n      callback(allAreas);\n    });\n  }\n\n  models(callback) {\n    const endpoint = `${API_BASE_URL}/models`;\n    axios.get(endpoint).then(res => {\n      const allModels = res.data;\n      console.log(allModels);\n      callback(allModels);\n    });\n  }\n\n  cumulative_infections(callback) {\n    const endpoint = `${API_BASE_URL}/cumulative_infections`;\n    axios.get(endpoint).then(res => callback(res.data));\n  }\n\n  /**\n   * Params should have 'days', 'model'\n   */\n  predict_all(params, callback) {\n    const endpoint = `${API_BASE_URL}/predict_all`;\n    axios.get(endpoint, {\n      params: params\n    }).then(res => callback(res.data));\n  }\n\n  /**\n   * Params should have 'country', 'state', 'weeks', 'distancing.'\n   */\n  predict(params, callback) {\n    const endpoint = `${API_BASE_URL}/predict`;\n    console.log(params);\n    axios\n      .get(endpoint, {\n        params: params\n      })\n      .then(res => {\n        callback(res.data);\n      });\n  }\n}\n\nexport default ModelAPI;\n"]},"metadata":{},"sourceType":"module"}